' Not Used Subroutines
' Copyright Â© 2015-2017 Nonki Takahashi.  The MIT License.
' Version 0.3
' Last update 2017-04-14
' Program ID LBX637-2
' Comment: Supported event handler and argument.
' Usage: 
'  (1) NotUsedsubroutines03 input.sb
'  (2) NotUsedsubroutines03
'      Filename? input.sb
'
Not = "False=True;True=False;"
WQ = Text.GetCharacter(34)
FCHAR = "_abcdefghijklmnopqrstuvwxyz"
TCHAR = FCHAR + "0123456789"
error = "True"
If Program.ArgumentCount = 1 Then
  buf = Program.GetArgument(1)
  ParseArgs()
  If args[1] <> "" Then
    If Text.IsSubText(args[1], "\") Then
      args["stdin"] = args[1]
    Else
      args["stdin"] = Program.Directory + "\" + args[1]
    EndIf
    error = "False"
  Else
    Help()
  EndIf
EndIf
While error
  TextWindow.Write("Filename? ")
  buf = TextWindow.Read()
  ParseArgs()
  If args[1] <> "" Then
    If Text.IsSubText(args[1], "\") Then
      args["stdin"] = args[1]
    Else
      args["stdin"] = Program.Directory + "\" + args[1]
    EndIf
    error = "False"
  Else
    Help()
  EndIf
EndWhile
eof = "False"
nLine = 0
nChar = 0
If args["stdin"] <> "" Then
  max = 0 ' dummy for remote
  max = Text.GetLength(File.ReadContents(args["stdin"]))
EndIf
While Not[eof]
  ReadLine()
  If Not[eof] Then
    LineToBuf()
    GetSub()
    p = 1
    GetCaller()
    p = 1
    GetHandler()
  EndIf
EndWhile
ListNotUsedSubs()

Sub GetSub
  ' param buf - command line
  ' param p - pointer to command line
  ' return matched - "True" if matched
  ' return defs[] - array of defined subroutine names
  SkipSpace()
  kw = "Sub"
  GetKeyword()
  If matched And p <= l Then
    SkipSpace()
    GetName()
  EndIf
  If matched And p <= l Then
    SkipSpace()
    kw = "'"
    GetKeyword()
  EndIf
  If matched Then
    defs[name] = 1  ' reference count
  EndIf
EndSub

Sub GetHandler
  ' param buf - command line
  ' param p - pointer to command line
  ' return matched - "True" if matched
  ' return subs[] - array of subroutine names
  SkipSpace()
  kw = "Controls.ButtonClicked"
  GetKeyword()
  If Not[matched] Then
    kw = "Controls.TextTyped"
    GetKeyword()
  EndIf
  If Not[matched] Then
    kw = "GraphicsWindow.KeyDown"
    GetKeyword()
  EndIf
  If Not[matched] Then
    kw = "GraphicsWindow.KeyUp"
    GetKeyword()
  EndIf
  If Not[matched] Then
    kw = "GraphicsWindow.MouseDown"
    GetKeyword()
  EndIf
  If Not[matched] Then
    kw = "GraphicsWindow.MouseMove"
    GetKeyword()
  EndIf
  If Not[matched] Then
    kw = "GraphicsWindow.MouseUp"
    GetKeyword()
  EndIf
  If Not[matched] Then
    kw = "Timer.Tick"
    GetKeyword()
  EndIf
  If matched Then
    SkipSpace()
    kw = "="
    GetKeyword()
  EndIf
  If matched Then
    SkipSpace()
    GetName()
  EndIf
  If matched Then
    subs[name] = subs[name] + 1  ' reference count
  EndIf
EndSub

Sub GetCaller
  ' param buf - command line
  ' param p - pointer to command line
  ' return matched - "True" if matched
  ' return subs[] - array of subroutine names
  SkipSpace()
  GetName()
  If matched Then
    SkipSpace()
    kw = "("
    GetKeyword()
  EndIf
  If matched Then
    SkipSpace()
    kw = ")"
    GetKeyword()
  EndIf
  If matched And p <= l Then
    SkipSpace()
  EndIf
  If matched And p <= l Then
    kw = "'"
    GetKeyword()
  EndIf
  If matched Then
    subs[name] = subs[name] + 1  ' reference count
  EndIf
EndSub

Sub GetKeyword
  ' param buf - command line
  ' param kw - keyword
  ' param l - length of buf
  ' param p - pointer in buf
  ' return p - pointer to not space in buf
  ' return matched - "True" if matched
  matched = "False"
  lKW = Text.GetLength(kw)
  If p + lKW - 1 <= l Then
    subtxt = Text.GetSubText(buf, p, lKW)
    If Text.ConvertToLowerCase(kw) = Text.ConvertToLowerCase(subtxt) Then
      matched = "True"
      p = p + lKW
    EndIf
  EndIf
EndSub

Sub GetName
  ' param buf - command line
  ' param l - length of buf
  ' param p - pointer in buf
  ' return p - pointer to not space in buf
  ' return name - got name
  ' return matched - "True" if matched
  matched = "False"
  name = ""
  If p <= l Then
    c = Text.GetSubText(buf, p, 1)
    If Text.IsSubText(FCHAR, Text.ConvertToLowerCase(c)) Then
      name = Text.Append(name, c)
      matched = "True"
      p = p + 1
    EndIf
  EndIf
  While matched And p <= l
    c = Text.GetSubText(buf, p, 1)
    If Text.IsSubText(TCHAR, Text.ConvertToLowerCase(c)) Then
      name = Text.Append(name, c)
      p = p + 1
    Else
      matched = "False"
    EndIf
  EndWhile
  If name <> "" Then
    matched = "True"
  EndIf
EndSub

Sub Help
  TextWindow.WriteLine("Usage:")
  TextWindow.WriteLine("  (1) NotUsedSubroutines03 input.sb")
  TextWindow.WriteLine("  (2) NotUsedSubroutines03")
  TextWindow.WriteLine("      Filename? input.sb")
EndSub

Sub ListNotUsedSubs
  index = Array.GetAllIndices(defs)
  nSubs = Array.GetItemCount(defs)
  For i = 1 To nSubs
    If subs[index[i]] < 1 Then
      TextWindow.WriteLine(index[i])
    EndIf
  EndFor
EndSub

Sub LineToBuf
  buf = line
  l = Text.GetLength(buf)
  p = 1
EndSub

Sub ReadLine
  ' return line - text of a line
  ' return eof - "True" if end of file
  If args["stdin"] = "" Then
    line = TextWindow.Read()
    If line = "" Then
      eof = "True"
    EndIf
  Else
    If nChar < max Then
      nLine = nLine + 1
      line = File.ReadLine(args["stdin"], nLine)
      nChar = nChar + Text.GetLength(line) + 2  ' 2 for CR and LF
    Else
      eof = "True"
    EndIf
  EndIf
EndSub

Sub WriteLine
  ' param line - text of a line
  If args["stdout"] = "" Then
    TextWindow.WriteLine(line)
  Else
    File.WriteLine(args["stdout"], nLine, line)
  EndIf
EndSub

Sub ParseArgs
  ' param buf - command line
  ' return args[] - array of arguments
  p = 1
  l = Text.GetLength(buf)
  n = 1
  While p <= l
    SkipSpace()
    GetToken()
  EndWhile
EndSub

Sub SkipSpace
  ' param buf - command line
  ' param l - length of buf
  ' param p - pointer in buf
  ' return p - pointer to not space in buf
  isSpace = "True"
  While p <= l And isSpace
    c = Text.GetSubText(buf, p, 1)
    If c = " " Then
      p = p + 1
    Else
      isSpace = "False"
    EndIf
  EndWhile
EndSub

Sub GetToken
  ' param buf - command line
  ' param l - length of buf
  ' param p - pointer in buf
  ' return args[] - array of arguments
  ' return p - pointer to not space in buf
  isDelim = "False"
  s = p ' p at start
  n = Array.GetItemCount(args)
  While p <= l And Not[isDelim]
    c = Text.GetSubText(buf, p, 1)
    If c = " " Then
      isDelim = "True"
    ElseIf c = "<" Or c = ">" Then
      isDelim = "True"
      d = c ' save delimiter
      If p = s Then
        p = p + 1
        SkipSpace()
        GetToken()
        If d = "<" Then
          args["stdin"] = args[n + 1]
        ElseIf d = ">" Then
          args["stdout"] = args[n + 1]
        EndIf
        args[n + 1] = ""
      EndIf
    ElseIf c = WQ Then
      p2 = Text.GetIndexOf(Text.GetSubTextToEnd(buf, p + 1), WQ)
      If 0 < p2 Then
        args[n + 1] = Text.Append(args[n + 1], Text.GetSubText(buf, p + 1, p2 - 1))
        p = p + p2 + 1
      Else
        TextWindow.WriteLine("Error: Missing quote")
      EndIf
    Else
      args[n + 1] = Text.Append(args[n + 1], c)
      p = p + 1
    EndIf
  EndWhile
EndSub
