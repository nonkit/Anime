' Mouse Animation
' Version 0.1
' Copyright Â© 2019 Nonki Takahashi.  The MIT Licnese.
' Last update 2019-09-28

GraphicsWindow.Title = "Mouse Animation"
Init()
While "True"
  For t = 0 To 2 * Math.Pi Step Math.Pi / 3
    Group_Move()
    da = 45 * Math.Sin(t)
    MoveLegs()
    x = x - 30
    If x < -grp["width"] Then
      x = gw
    EndIf
    Program.Delay(200) 
  EndFor
EndWhile

Sub Init
  Not = "True=False;False=True;"
  SB_Workaround()
  angle = 0 ' dummy
  param = ""
  gw = GraphicsWindow.Width
  gh = GraphicsWindow.Height
  GraphicsWindow.FontName = "Impact"
  GraphicsWindow.BrushColor = "#AAAAAA"
  GraphicsWindow.FontSize = 40
  GraphicsWindow.DrawText(gw / 2 - 262, 70, "Happy New Year")
  GraphicsWindow.BrushColor = "DarkBlue"
  GraphicsWindow.FontSize = 100
  GraphicsWindow.DrawText(gw / 2 + 48, 10, "2020")
  Shapes_Init_Mouse()
  name = "Mouse"
  Group_Add()
  i = nGroup
  grp = group[i]
  shape = grp["shape"]
  da = 10
  MoveLegs()
  Program.Delay(1000)
  y = gh - 71
  x = gw
EndSub

Sub MoveLegs
  shp = shape[9]
  Shapes.Rotate(shp["obj"], -80 + da)
  shp = shape[10]
  Shapes.Rotate(shp["obj"], -80 + da)
  shp = shape[11]
  Shapes.Rotate(shp["obj"], -100 - da)
  shp = shape[12]
  Shapes.Rotate(shp["obj"], -100 - da)
EndSub

Sub Group_Add
  ' Group | add shapes to a group
  ' param name - group name
  ' param shX, shY, origin of shape array
  ' param shape[] - shape array
  ' param nGroup - number of group
  ' return nGroup - updated number of group
  ' return group - group array
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  nGroup = nGroup + 1
  grp = ""
  grp["name"] = name
  grp["x"] = shX
  grp["y"] = shY
  grp["angle"] = 0
  grp["dir"] = 1
  Shapes_CalcWidthAndHeight()
  grp["width"] = shWidth
  grp["height"] = shHeight
  grp["cx"] = shWidth / 2
  grp["cy"] = shHeight / 2
  s = 1
  grp["scale"] = s
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    GraphicsWindow.PenWidth = shp["pw"] * s
    If shp["pw"] > 0 Then
      GraphicsWindow.PenColor = shp["pc"]
    EndIf
    If Text.IsSubText("rect|ell|tri|text|btn", shp["func"]) Then
      GraphicsWindow.BrushColor = shp["bc"]
    EndIf
    If Text.IsSubText("text|btn", shp["func"]) Then
      If silverlight Then
        fs = Math.Floor(shp["fs"] * 0.9)
      Else
        fs = shp["fs"]
      EndIf
      GraphicsWindow.FontSize = fs * s
      GraphicsWindow.FontName = shp["fn"]
      If shp["fb"] = "False" Then
        GraphicsWindow.FontBold = "False"
      Else
        GraphicsWindow.FontBold = "True"
      EndIf
    EndIf
    If shp["func"] = "rect" Then
      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "ell" Then
      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "tri" Then
      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)
    ElseIf shp["func"] = "line" Then
      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)
    ElseIf shp["func"] = "text" Then
      shp["obj"] = Shapes.AddText(shp["text"])
    EndIf
    x = shp["x"]
    y = shp["y"]
    shp["rx"] = x
    shp["ry"] = y
    If sbd And (shp["func"] = "line") Then
      shp["wx"] = x
      shp["wy"] = y
    ElseIf silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(shp["angle"])
      SB_RotateWorkaround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    If shp["func"] = "btn" Then
      shp["obj"] = Controls.AddButton(shp["caption"], shX + x * s, shY + y * s)
    Else
      Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    EndIf
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then
      Shapes.Rotate(shp["obj"], shp["angle"])
    EndIf
    shape[i] = shp
  EndFor
  grp["shape"] = shape
  group[nGroup] = grp
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub

Sub Group_Move
  ' Group | move a group
  ' param group[i] - group to move
  ' param x, y - position to move
  ' return group[i] - updated group
  Stack.PushValue("local", j)
  grp = group[i]
  s = grp["scale"]
  grp["x"] = x
  grp["y"] = y
  shape = grp["shape"]
  n = Array.GetItemCount(shape)
  For j = 1 To n
    shp = shape[j]
    If sbd And (shp["func"] = "line") Then
      _x = shp["wx"]
      _y = shp["wy"]
    ElseIf silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      _x = shp["wx"]
      _y = shp["wy"]
    Else
      _x = shp["rx"]
      _y = shp["ry"]
    EndIf
    _w2 = shp["width"] / 2
    _h2 = shp["height"] / 2
    Shapes.Move(shp["obj"], grp["x"] + (_x - _w2) * s + _w2, grp["y"]  + (_y - _h2) * s + _h2)
  EndFor
  group[i] = grp
  j = Stack.PopValue("local")
EndSub

Sub SB_RotateWorkaround
  ' Small Basic | rotate workaround for Silverlight
  ' param shp - current shape
  ' param x, y - original coordinate
  ' param alpha - angle [radian]
  ' returns x, y - workaround coordinate
  If shp["func"] = "tri" Then
    x1 = -Math.Floor(shp["x3"] / 2)
    y1 = -Math.Floor(shp["y3"] / 2)
  ElseIf shp["func"] = "line" Then
    x1 = -Math.Floor(Math.Abs(shp["x1"] - shp["x2"]) / 2)
    y1 = -Math.Floor(Math.Abs(shp["y1"] - shp["y2"]) / 2)
  EndIf
  ox = x - x1
  oy = y - y1
  x = x1 * Math.Cos(alpha) - y1 * Math.Sin(alpha) + ox
  y = x1 * Math.Sin(alpha) + y1 * Math.Cos(alpha) + oy
EndSub

Sub SB_Workaround
  ' Small Basic | workaround for Silverlight / SBD
  ' return silverlight - "True" if in remote
  ' return sbd - "True" if in Small Basic Desktop
  color = GraphicsWindow.GetPixel(0, 0)
  sbd = "False"
  If Text.GetLength(color) > 7 Then
    silverlight = "True"
    msWait = 300
  Else
    silverlight = "False"
    gw = GraphicsWindow.Width
    gh = GraphicsWindow.Height
    If (gw = 624) And (gh = 441) Then
      sbd = "True"
    EndIf
  EndIf
EndSub

Sub Shapes_CalcWidthAndHeight
  ' Shapes | calculate total width and height of shapes
  ' param shape[] - shape array
  ' return shWidth, shHeight - total size of shapes
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    If shp["func"] = "tri" Or shp["func"] = "line" Then
      xmin = shp["x1"]
      xmax = shp["x1"]
      ymin = shp["y1"]
      ymax = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If xmax < shp["x2"] Then
        xmax = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If ymax < shp["y2"] Then
        ymax = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If xmax < shp["x3"] Then
          xmax = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        If ymax < shp["y3"] Then
          ymax = shp["y3"]
        EndIf
      EndIf
      shp["width"] = xmax - xmin
      shp["height"] = ymax - ymin
    EndIf
    If i = 1 Then
      shWidth = shp["x"] + shp["width"]
      shHeight = shp["y"] + shp["height"]
    Else
      If shWidth < shp["x"] + shp["width"] Then
        shWidth = shp["x"] + shp["width"]
      EndIf
      If shHeight < shp["y"] + shp["height"] Then
        shHeight = shp["y"] + shp["height"]
      EndIf
    EndIf
    shape[i] = shp
  EndFor
EndSub

Sub Shapes_Init_Mouse
  ' Shapes | initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = gw / 2 - 58.83  ' x offset
  shY = gh / 2 - 28.2   ' y offset
  shape = ""
  shape[1] = "func=line;x=64.83;y=19.92;x1=3.75;y1=0.00;x2=0;y2=1.77;pw=1.50;pc=#999999;"
  shape[2] = "func=line;x=68.58;y=19.2;x1=3.75;y1=0;x2=0;y2=0.73;pw=1.50;pc=#999999;"
  shape[3] = "func=line;x=72.33;y=19.2;x1=3.75;y1=0.73;x2=0;y2=0;pw=1.50;pc=#999999;"
  shape[4] = "func=line;x=76.08;y=19.92;x1=3.75;y1=1.77;x2=0;y2=0.00;pw=1.50;pc=#999999;"
  shape[5] = "func=line;x=79.83;y=21.69;x1=3.75;y1=1.77;x2=0;y2=0.00;pw=1.50;pc=#999999;"
  shape[6] = "func=line;x=83.58;y=23.46;x1=3.75;y1=0.73;x2=0;y2=0;pw=1.50;pc=#999999;"
  shape[7] = "func=line;x=87.33;y=23.46;x1=3.75;y1=0;x2=0;y2=0.73;pw=1.50;pc=#999999;"
  shape[8] = "func=line;x=91.08;y=21.7;x1=3.75;y1=0;x2=0;y2=1.76;pw=1.50;pc=#999999;"
  shape[9] = "func=line;x=23.83;y=21.7;x1=-26;y1=0;x2=0;y2=0;pw=2.50;pc=Tan;"
  shape[10] = "func=line;x=29.83;y=21.7;x1=-26;y1=0;x2=0;y2=0;pw=2.50;pc=Tan;"
  shape[11] = "func=line;x=51.83;y=21.7;x1=-26;y1=0;x2=0;y2=0;pw=2.50;pc=Tan;"
  shape[12] = "func=line;x=57.83;y=21.7;x1=-26;y1=0;x2=0;y2=0;pw=2.50;pc=Tan;"
  shape[13] = "func=ell;x=15.83;y=9.2;width=50;height=25;pw=0;bc=#888888;"
  shape[14] = "func=tri;x=0.83;y=10.7;x1=10;y1=0;x2=0;y2=25;x3=20;y3=25;angle=-130;pw=0;bc=#999999;"
  shape[15] = "func=ell;x=6.47;y=0.0;width=15;height=15;pw=2.50;pc=#999999;bc=Tan;"
  shape[16] = "func=ell;x=19.33;y=15.32;width=15;height=15;pw=2.50;pc=#999999;bc=Tan;"
  shape[17] = "func=ell;x=0.00;y=29.98;width=2.5;height=2.5;pw=0;bc=#999999;"
  shape[18] = "func=ell;x=6.38;y=14.49;width=5;height=5;pw=0;bc=Black;"
  shape[19] = "func=ell;x=14.10;y=21.18;width=5;height=5;pw=0;bc=Black;"
EndSub
