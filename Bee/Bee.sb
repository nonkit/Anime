' Honey Bee
' Version 0.3
' Copyright Â© 2016-2019 Nonki Takahashi.  The MIT License.
' 2016-08-20 20:47:12 Shapes generated by Shapes 2.2b.
' Last update 2019-10-04
' Program ID GDP128-1

GraphicsWindow.Title = "Honey Bee"
GraphicsWindow.BackgroundColor = "SkyBlue"
SB_Workaround()
Init()
length = 100
dx = 20
GraphicsWindow.BrushColor = "DarkGreen"
GraphicsWindow.FillRectangle(0, 250, gw, gh - 250)
For y = 230 To 400 Step 10
  dx = dx * 1.1
  For x = 0 To gw Step dx
    DrawMarguerite()
  EndFor
  length = length * 1.05
EndFor

' initialize shapes
Shapes_Init_Bee()
' add shapes
scale = 0.05
angle = 0
dy = 10
For i = 1 To 50
  name = "Bee" + i
  Group_Add()
  x = Math.GetRandomNumber(gw)
  y = Math.GetRandomNumber(gh * 0.6) + dy
  Group_Move()
  sc[i] = scale
  scale = scale * 1.02
  dy = dy * 1.06
EndFor
While "True"
  For i = 1 To 50
    grp = group[i]
    sign = Math.GetRandomNumber(2) * 2 - 3 
    dx = sign * 10 * sc[i]
    sign = Math.GetRandomNumber(2) * 2 - 3 
    dy = sign * 10 * sc[i]
    x = grp["x"] + dx
    y = grp["y"] + dy
    Group_Move()
  EndFor
  Program.Delay(10)
EndWhile

Sub Init
  gw = GraphicsWindow.Width
  gh = GraphicsWindow.Height
EndSub

Sub DrawMarguerite
  Stack.PushValue("local", dx)
  ' stem
  GraphicsWindow.PenColor = "Green"
  GraphicsWindow.DrawLine(x, y, x, y + length)
  For i = 1 To 5
    size = length / 30
    dx = Math.GetRandomNumber(3 * size) - 1.5 * size
    dy = Math.GetRandomNumber(3 * size) - 1.5 * size
    Stack.PushValue("local", x)
    Stack.PushValue("local", y)
    x = x + dx
    y = y + dy
    DrawFlower()
    y = Stack.PopValue("local")
    x = Stack.PopValue("local")
  EndFor
  Stack.PushValue("local", y)
  dy = (2 + Math.GetRandomNumber(10) / 10) * size
  dx = 2 * size
  For i = 1 To 4
    y = y + dy
    dy = dy * 1.1
    x0 = x
    If Math.Remainder(i, 2) = 0 Then
      x = x - dx
    Else
      x = x + dx
    EndIf
    dx = dx * 1.1
    ' branch
    GraphicsWindow.DrawLine(x, y, x0, y + size)
    x = x0
  EndFor
  y = Stack.PopValue("local")
  dx = Stack.PopValue("local")
EndSub

Sub DrawFlower
  GraphicsWindow.PenColor = "White"
  x1 = x
  y1 = y
  For a = 45 To 360 Step 45
    _a = Math.GetRadians(a)
    x2 = x + size * Math.Cos(_a)
    y2 = y + size * Math.Sin(_a)
    GraphicsWindow.DrawLine(x1, y1, x2, y2)
  EndFor
  GraphicsWindow.BrushColor = "Yellow"
  GraphicsWindow.FillEllipse(x - size / 2, y - size / 2, size, size)
  GraphicsWindow.PenColor = "Green"
EndSub

Sub Group_Add
  ' Group | add shapes to a group
  ' param name - group name
  ' param shX, shY, origin of shape array
  ' param scale
  ' param shape[] - shape array
  ' param nGroup - number of group
  ' return nGroup - updated number of group
  ' return group - group array
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  nGroup = nGroup + 1
  grp = ""
  grp["name"] = name
  grp["x"] = shX
  grp["y"] = shY
  grp["angle"] = 0
  grp["dir"] = 1
  Shapes_CalcWidthAndHeight()
  grp["width"] = shWidth
  grp["height"] = shHeight
  grp["cx"] = shWidth / 2
  grp["cy"] = shHeight / 2
  s = scale
  grp["scale"] = s
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    GraphicsWindow.PenWidth = shp["pw"] * s
    If shp["pw"] > 0 Then
      GraphicsWindow.PenColor = shp["pc"]
    EndIf
    If Text.IsSubText("rect|ell|tri|text|btn", shp["func"]) Then
      GraphicsWindow.BrushColor = shp["bc"]
    EndIf
    If Text.IsSubText("text|btn", shp["func"]) Then
      If silverlight Then
        fs = Math.Floor(shp["fs"] * 0.9)
      Else
        fs = shp["fs"]
      EndIf
      GraphicsWindow.FontSize = fs * s
      GraphicsWindow.FontName = shp["fn"]
      If shp["fb"] = "False" Then
        GraphicsWindow.FontBold = "False"
      Else
        GraphicsWindow.FontBold = "True"
      EndIf
    EndIf
    If shp["func"] = "rect" Then
      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "ell" Then
      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "tri" Then
      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)
    ElseIf shp["func"] = "line" Then
      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)
    ElseIf shp["func"] = "text" Then
      shp["obj"] = Shapes.AddText(shp["text"])
    EndIf
    x = shp["x"]
    y = shp["y"]
    shp["rx"] = x
    shp["ry"] = y
    If sbd And (shp["func"] = "line") Then
      shp["wx"] = x
      shp["wy"] = y
    ElseIf silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      _alpha = Math.GetRadians(shp["angle"])
      SB_RotateWorkaround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    If shp["func"] = "btn" Then
      shp["obj"] = Controls.AddButton(shp["caption"], shX + x * s, shY + y * s)
    Else
      Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    EndIf
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then
      Shapes.Rotate(shp["obj"], shp["angle"])
    EndIf
    shape[i] = shp
  EndFor
  grp["shape"] = shape
  group[nGroup] = grp
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub

Sub Group_Move
  ' Group | move a group
  ' param group[i] - group To move
  ' param x, y - position To move
  ' return group[i] - updated group
  Stack.PushValue("local", j)
  grp = group[i]
  s = grp["scale"]
  grp["x"] = x
  grp["y"] = y
  shape = grp["shape"]
  n = Array.GetItemCount(shape)
  For j = 1 To n
    shp = shape[j]
    If sbd And (shp["func"] = "line") Then
      _x = shp["wx"]
      _y = shp["wy"]
    ElseIf silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      _x = shp["wx"]
      _y = shp["wy"]
    Else
      _x = shp["rx"]
      _y = shp["ry"]
    EndIf
    _w2 = shp["width"] / 2
    _h2 = shp["height"] / 2
    Shapes.Move(shp["obj"], grp["x"] + (_x - _w2) * s, grp["y"]  + (_y - _h2) * s)
  EndFor
  group[i] = grp
  j = Stack.PopValue("local")
EndSub

Sub Math_CartesianToPolar
  ' Math | convert cartesian coodinate to polar coordinate
  ' param x, y - cartesian coordinate
  ' return r, a - polar coordinate
  r = Math.SquareRoot(x * x + y * y)
  If x = 0 And y > 0 Then
    a = 90 ' [degree]
  ElseIf x = 0 And y < 0 Then
    a = -90
  Else
    a = Math.ArcTan(y / x) * 180 / Math.Pi
  EndIf
  If x < 0 Then
    a = a + 180
  ElseIf x > 0 And y < 0 Then
    a = a + 360
  EndIf
EndSub

Sub SB_RotateWorkaround
  ' Small Basic | Rotate workaround for Silverlight
  ' param x, y - original coordinate
  ' param _alpha - angle [radian]
  ' returns x, y - workaround coordinate
  If shape[i]["func"] = "tri" Then
    x1 = -Math.Floor(shape[i]["x3"] / 2)
    y1 = -Math.Floor(shape[i]["y3"] / 2)
  ElseIf shape[i]["func"] = "line" Then
    x1 = -Math.Floor(Math.Abs(shape[i]["x1"] - shape[i]["x2"]) / 2)
    y1 = -Math.Floor(Math.Abs(shape[i]["y1"] - shape[i]["y2"]) / 2)
  EndIf
  ox = x - x1
  oy = y - y1
  x = x1 * Math.Cos(_alpha) - y1 * Math.Sin(_alpha) + ox
  y = x1 * Math.Sin(_alpha) + y1 * Math.Cos(_alpha) + oy
EndSub

Sub SB_Workaround
  ' Small Basic | workaround for Silverlight / SBD
  ' return silverlight - "True" if in remote
  ' return sbd - "True" if Small Basic Desktop
  color = GraphicsWindow.GetPixel(0, 0)
  sbd = "False"
  If Text.GetLength(color) > 7 Then
    silverlight = "True"
    msWait = 300
  Else
    silverlight = "False"
    _gw = GraphicsWindow.Width
    _gh = GraphicsWindow.Height
    If (_gw = 624) And (_gh = 441) Then
      sbd = "True"
    EndIf
  EndIf
EndSub

Sub Shapes_CalcRotatePos2
  param = ""
  ' Shapes | Calculate position for rotated shape
  ' param["x"], param["y"] - position of a shape
  ' param["width"], param["height"] - size of a shape
  ' param ["cx"], param["cy"] - center of rotation
  ' param ["angle"] - rotate angle
  ' return x, y - rotated position of a shape
  _cx = param["x"] + param["width"] / 2
  _cy = param["y"] + param["height"] / 2
  x = _cx - param["cx"]
  y = _cy - param["cy"]
  Math_CartesianToPolar()
  a = a + param["angle"]
  x = r * Math.Cos(a * Math.Pi / 180)
  y = r * Math.Sin(a * Math.Pi / 180)
  _cx = x + param["cx"]
  _cy = y + param["cy"]
  x = _cx - param["width"] / 2
  y = _cy - param["height"] / 2
EndSub

Sub Shapes_CalcWidthAndHeight
  ' Shapes | calculate total width and height of shapes
  ' param shape[] - shape array
  ' return shWidth, shHeight - total size of shapes
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    If shp["func"] = "tri" Or shp["func"] = "line" Then
      xmin = shp["x1"]
      xmax = shp["x1"]
      ymin = shp["y1"]
      ymax = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If xmax < shp["x2"] Then
        xmax = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If ymax < shp["y2"] Then
        ymax = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If xmax < shp["x3"] Then
          xmax = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        If ymax < shp["y3"] Then
          ymax = shp["y3"]
        EndIf
      EndIf
      shp["width"] = xmax - xmin
      shp["height"] = ymax - ymin
    EndIf
    If i = 1 Then
      shWidth = shp["x"] + shp["width"]
      shHeight = shp["y"] + shp["height"]
    Else
      If shWidth < shp["x"] + shp["width"] Then
        shWidth = shp["x"] + shp["width"]
      EndIf
      If shHeight < shp["y"] + shp["height"] Then
        shHeight = shp["y"] + shp["height"]
      EndIf
    EndIf
    shape[i] = shp
  EndFor
EndSub

Sub Shapes_Init_Bee
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 194 ' x offset
  shY = 111 ' y offset
  shape = ""
  shape[1] = "func=tri;x=220;y=174;x1=16;y1=0;x2=0;y2=29;x3=33;y3=29;angle=166;bc=#2D150B;pw=0;"
  shape[2] = "func=ell;x=131;y=101;width=126;height=76;angle=29;bc=#F6CE2C;pw=0;"
  shape[3] = "func=ell;x=181;y=115;width=65;height=69;bc=#2D150B;pw=0;"
  shape[4] = "func=ell;x=167;y=105;width=68;height=71;bc=#F6CE2C;pw=0;"
  shape[5] = "func=ell;x=158;y=100;width=72;height=74;bc=#2D150B;pw=0;"
  shape[6] = "func=ell;x=142;y=95;width=73;height=70;bc=#F6CE2C;pw=0;"
  shape[7] = "func=ell;x=137;y=94;width=69;height=67;bc=#2D150B;pw=0;"
  shape[8] = "func=ell;x=74;y=75;width=92;height=94;bc=#F0C22A;pw=0;"
  shape[9] = "func=ell;x=101;y=75;width=38;height=17;bc=#2D150B;pw=0;"
  shape[10] = "func=tri;x=51;y=156;x1=14;y1=0;x2=0;y2=17;x3=29;y3=17;angle=178;bc=#2D150B;pw=0;"
  shape[11] = "func=ell;x=28;y=90;width=82;height=69;bc=#F6CE2C;pw=0;"
  shape[12] = "func=rect;x=38;y=150;width=19;height=6;angle=46;bc=#2D150B;pw=0;"
  shape[13] = "func=rect;x=72;y=151;width=18;height=7;angle=313;bc=#2D150B;pw=0;"
  shape[14] = "func=ell;x=28;y=107;width=13;height=37;angle=348;bc=#2D150B;pw=0;"
  shape[15] = "func=ell;x=87;y=105;width=19;height=41;angle=9;bc=#2D150B;pw=0;"
  shape[16] = "func=line;x=24;y=114;x1=31;y1=20;x2=0;y2=0;pc=#2D150B;pw=2;"
  shape[17] = "func=line;x=0;y=114;x1=24;y1=0;x2=0;y2=43;pc=#2D150B;pw=2;"
  shape[18] = "func=line;x=68;y=115;x1=0;y1=18;x2=10;y2=0;pc=#2D150B;pw=2;"
  shape[19] = "func=line;x=78;y=115;x1=0;y1=0;x2=9;y2=46;pc=#2D150B;pw=2;"
  shape[20] = "func=ell;x=95;y=29;width=194;height=30;angle=323;bc=#66FFFFFF;pw=0;"
  shape[21] = "func=ell;x=46;y=0;width=46;height=96;angle=335;bc=#66FFFFFF;pw=0;"
  shape[22] = "func=ell;x=116;y=57;width=108;height=31;angle=335;bc=#66FFFFFF;pw=0;"
  shape[23] = "func=ell;x=150;y=141;width=60;height=9;angle=338;bc=#522614;pw=0;"
  shape[24] = "func=ell;x=200;y=147;width=54;height=13;angle=42;bc=#522614;pw=0;"
  shape[25] = "func=ell;x=240;y=174;width=32;height=14;angle=38;bc=#522614;pw=0;"
  shape[26] = "func=ell;x=146;y=166;width=32;height=14;angle=68;bc=#522614;pw=0;"
  shape[27] = "func=ell;x=140;y=153;width=9;height=45;angle=15;bc=#522614;pw=0;"
  shape[28] = "func=ell;x=132;y=193;width=0;height=27;bc=#522614;pw=0;"
  shape[29] = "func=ell;x=127;y=195;width=11;height=28;angle=22;bc=#522614;pw=0;"
  shape[30] = "func=ell;x=92;y=109;width=9;height=9;bc=#FFFFFF;pw=0;"
  shape[31] = "func=line;x=266;y=191;x1=0;y1=1;x2=24;y2=0;pc=#2D150B;pw=2;"
  shape[32] = "func=line;x=290;y=191;x1=0;y1=1;x2=3;y2=0;pc=#2D150B;pw=2;"
  shape[33] = "func=line;x=289;y=190;x1=0;y1=0;x2=10;y2=10;pc=#2D150B;pw=2;"
  shape[34] = "func=line;x=164;y=185;x1=0;y1=0;x2=21;y2=5;pc=#2D150B;pw=2;"
  shape[35] = "func=line;x=185;y=190;x1=0;y1=0;x2=3;y2=12;pc=#2D150B;pw=2;"
  shape[36] = "func=line;x=128;y=222;x1=0;y1=0;x2=7;y2=11;pc=#2D150B;pw=2;"
  shape[37] = "func=line;x=135;y=233;x1=0;y1=0;x2=1;y2=11;pc=#2D150B;pw=2;"
  shape[38] = "func=line;x=95;y=185;x1=11;y1=0;x2=0;y2=11;pc=#2D150B;pw=2;"
  shape[39] = "func=line;x=95;y=196;x1=0;y1=0;x2=0;y2=7;pc=#2D150B;pw=2;"
  shape[40] = "func=ell;x=103;y=166;width=10;height=21;bc=#522614;pw=0;"
  shape[41] = "func=ell;x=72;y=165;width=30;height=6;angle=335;bc=#522614;pw=0;"
  shape[42] = "func=ell;x=79;y=171;width=30;height=6;angle=326;bc=#522614;pw=0;"
  shape[43] = "func=ell;x=73;y=182;width=10;height=30;angle=23;bc=#522614;pw=0;"
  shape[44] = "func=ell;x=60;y=172;width=10;height=30;angle=30;bc=#522614;pw=0;"
  shape[45] = "func=line;x=56;y=206;x1=16;y1=0;x2=0;y2=10;pc=#2D150B;pw=2;"
  shape[46] = "func=line;x=52;y=216;x1=4;y1=0;x2=0;y2=9;pc=#2D150B;pw=2;"
  shape[47] = "func=line;x=37;y=196;x1=23;y1=1;x2=0;y2=0;pc=#2D150B;pw=2;"
  shape[48] = "func=line;x=29;y=196;x1=8;y1=0;x2=0;y2=9;pc=#2D150B;pw=2;"
EndSub
