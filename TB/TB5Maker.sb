' TB5 Maker
' Copyright Â© 2019 Nonki Takahashi.  The MIT License.

GraphicsWindow.Title = "TB5 Maker"
bg = "#000022"
GraphicsWindow.BackgroundColor = bg
gw = GraphicsWindow.Width / 0.7
gh = GraphicsWindow.Height / 0.7
GraphicsWindow.Width = gw
GraphicsWindow.Height = gh
SB_Workaround()
DrawGalaxy()
DrawStars()
' initialize shapes for TB3
Shapes_Init_TB3()
angle = 0
scale = 1
name = "TB3"
Group_Add()
i = nGroup
cx = ""
cy = ""
For angle = -10 To -90 Step -10
  Program.Delay(100)
  Group_Rotate()
EndFor
Init()

' antenna 1
pc = "#AAAAAA"
pw = 2
xc = 250 + 153
x = xc - 45
y = 160
x1 = 0
y1 = 0
x2 = 40
y2 = 80
Shapes_AddLine()
Stack.PushValue("local", xc)
Stack.PushValue("local", x)
Stack.PushValue("local", y)
xc = x
yc = y
x = xc - 12
y = yc - 4
x1 = 0
y1 = 0
x2 = 4
y2 = 8
Shapes_AddLine()
x = xc + 4
y = yc - 12
Shapes_AddLine()
x = xc - 8
y = yc - 4
x1 = 0
y1 = 8
x2 = 16
y2 = 0
Shapes_AddLine()
y = Stack.PopValue("local")
x = Stack.PopValue("local")
xc = Stack.PopValue("local")
x = xc + 5
x1 = 0
y1 = 80
x2 = 40
y2 = 0
Shapes_AddLine()
Stack.PushValue("local", xc)
Stack.PushValue("local", x)
Stack.PushValue("local", y)
xc = x + 40
yc = y
x = xc - 8
y = yc - 12
x1 = 0
y1 = 8
x2 = 4
y2 = 0
Shapes_AddLine()
x = xc + 8
y = yc - 4
Shapes_AddLine()
x = xc - 8
y = yc - 4
x1 = 0
y1 = 0
x2 = 16
y2 = 8
Shapes_AddLine()
y = Stack.PopValue("local")
x = Stack.PopValue("local")
xc = Stack.PopValue("local")
pw = 0

' dock
bc = "#AAAAAA"
xc = 250
x = xc + 80
y = 280
width = 190
height = 60
Shapes_AddRectangle()
x = xc + 180
y = 235
x1 = 20
y1 = 0
x2 = 0
y2 = 45
x3 = 40
y3 = 45
Shapes_AddTriangle()
x = x + x1
width = 70
height = 45
Shapes_AddRectangle()
bc = "#000000"
_w = 30
width = 40
height = 20
ratio = (width - _w) / 2 / height
x = xc + 133
y = 260
Shapes_AddTrapezoid()
bc = "#990000"
_w = 20
width = 30
height = 20
ratio = (width - _w) / 2 / height
x = xc + 138
y = 240
Shapes_AddTrapezoid()
pc = "#AAAAAA"
pw = 2
x = xc + 100
y = 270
x1 = 0
y1 = 0
x2 = 205
y2 = 0
Shapes_AddLine()
x2 = 0
y2 = 10
For x = xc + 100 To xc + 305 Step 5
  Shapes_AddLine()
EndFor
x = xc + 190
y = 350
x1 = 0
y1 = 0
x2 = 75
y2 = 0
Shapes_AddLine()
y = y - 10
x2 = 0
y2 = 10
For x = xc + 190 To xc + 265 Step 5
  Shapes_AddLine()
EndFor
pw = 4
x = xc + 270
y = 280
x1 = 0
y1 = 0
x2 = 40
y2 = 0
Shapes_AddLine()
x1 = 35
y1 = 0
x2 = 0
y2 = 50
Shapes_AddLine()
pc = "#CC0000"
pw = 4
x = xc + 80
y = 286
x1 = 0
y1 = 0
x2 = 185
y2 = 0
Shapes_AddLine()
y = 310
Shapes_AddLine()
y = 286
x1 = 0
y1 = 0
x2 = 0
y2 = 24
For x = xc + 212 To xc + 248 Step 6
  Shapes_AddLine()
EndFor
pc = "#888888"
pw = 4
y = 242
y2 = 35
For x = xc + 202 To xc + 262 Step 10
  Shapes_AddLine()
EndFor
pw = 0
bc = "#000000"
x = xc + 220
width = 25
height = 35
Shapes_AddRectangle()
x = xc + 224
bc = "#FFFFFF"
fn = "Arial"
fs = 30
fb = "True"
txt = "5"
Shapes_AddText()

' doom
bc = "#888888"
width = 30
height = 30
y = 230 - height / 2
x = xc - 60 - width / 2
Shapes_AddEllipse()
x = xc + 60 - width / 2
Shapes_AddEllipse()
bc = "#33FFFFFF"
width = 80
height = 80
x = xc - width / 2
y = 230 - height / 2
Shapes_AddEllipse()

' body
bc = "#BBBBBB"
_w = 200
width = 250
height = 50
ratio = (width - _w) / 2 / height
x = xc - width / 2
y = 230
Shapes_AddTrapezoid()
Stack.PushValue("local", x)
Stack.PushValue("local", y)
pc = "#AAAAAA"
pw = 2
da = 15
x1 = 0
For a = 50 - da To 50 + da Step 2
  _a = Math.GetRadians(a) 
  x = xc - width / 2 * Math.Sin(_a)
  y1 = height
  x2 = xc - _w / 2 * Math.Sin(_a) - x
  y2 = 0
  Shapes_AddLine()
  x = xc + _w / 2 * Math.Sin(_a)
  x2 = xc + width / 2 * Math.Sin(_a) - x
  y1 = 0
  y2 = height
  Shapes_AddLine()
EndFor
y = Stack.PopValue("local")
x = Stack.PopValue("local")
pw = 0
Stack.PushValue("local", _w)
Stack.PushValue("local", width)
Stack.PushValue("local", height)
Stack.PushValue("local", x)
Stack.PushValue("local", y)
Stack.PushValue("local", ratio)
bc = "#004477"
_w = 116
width = 124
height = 16
ratio = (width - _w) / 2 / height
x = xc - width / 2
y = 244
Shapes_AddTrapezoid()
ratio = Stack.PopValue("local")
y = Stack.PopValue("local")
x = Stack.PopValue("local")
height = Stack.PopValue("local")
width = Stack.PopValue("local")
_w = Stack.PopValue("local")
bc = "#888888"
angle = 180
y = y + height
height = 80
Shapes_AddTrapezoid()
angle = 0

' antenna 2
Stack.PushValue("local", x)
Stack.PushValue("local", y)
pc = "#442200"
pw = 3
x = xc - (_w * 0.66 + width * 0.33) / 2 - 60
y = y - 50 * 0.66 - 30
x1 = 0
y1 = 0
x2 = 60
y2 = 30
Shapes_AddLine()
x = x + 2
y = y - 4
x2 = 40
y2 = 20
Shapes_AddLine()
x = x - 4
y = y + 8
Shapes_AddLine()
y = Stack.PopValue("local")
x = Stack.PopValue("local")

' antenna 3
Stack.PushValue("local", x)
Stack.PushValue("local", y)
pc = "#888888"
pw = 4
x = xc
y = y + height
x1 = 0
y1 = 0
x2 = 0
y2 = 100
Shapes_AddLine()
pw = 2
x = xc - 10
x2 = 6
Shapes_AddLine()
x = xc + 4
x1 = 6
y1 = 0
x2 = 0
y2 = 100
Shapes_AddLine()
x = xc - 20
y = y + 100
x1 = 0
y1 = 0
x2 = 40
y2 = 0
Shapes_AddLine()
x1 = 0
y1 = 0
x2 = 0
y2 = 10
For x = xc - 20 To xc + 20 Step 5
  Shapes_AddLine()
EndFor
x = xc - 20
y = y + 10
x1 = 0
y1 = 0
x2 = 40
y2 = 0
Shapes_AddLine()
y = Stack.PopValue("local")
x = Stack.PopValue("local")
pw = 0

' ring
bc = "#442200"
width = 40
height = 40
y = y + 10
yc = y + 20
x = xc - 150 - width / 2
Shapes_AddEllipse()
x = xc + 150 - width / 2
Shapes_AddEllipse()
width = 300
x = xc - 150
Shapes_AddRectangle()
da = 5
_a1 = Math.GetRadians(45 + da)
_a2 = Math.GetRadians(45 - da)
x1 = 0
y1 = 0
y2 = 0
pc = "#66000000"
pw = 3
For b = 15 To 165 Step 15
  _b = Math.GetRadians(b)
  y = yc - 20 * Math.Cos(_b)
  x = xc - (150 + 20 * Math.Sin(_b)) * Math.Cos(_a1)
  x2 = xc - (150 + 20 * Math.Sin(_b)) * Math.Cos(_a2) - x
  Shapes_AddLine()
  x = xc + (150 + 20 * Math.Sin(_b)) * Math.Cos(_a2)
  x2 = xc + (150 + 20 * Math.Sin(_b)) * Math.Cos(_a1) - x
  Shapes_AddLine()
EndFor
pw = 0
bc = "#000000"
width = 120
height = 26
x = xc - width / 2
y = yc - height / 2
Shapes_AddRectangle()
bc = "#FFFFFF"
fs = 18
fb = "False"
fn = "Impact"
x = x + 4
y = y + 3
txt = "THUNDERBIRD 5"
Shapes_AddText()
Shapes_Normalize()
Shapes_DumpArray()

grp = group[i]
x = grp["x"]
y = grp["y"]
While xc + 305 < x
  Program.Delay(200)
  x = x - 5
  Group_Move()
EndWhile

Sub Init
  ox = gw / 2
  oy = gh / 2
  iMin = 1
  iMax = iMin - 1
  pc = ""
  pw = 0
  bc = ""
  x = 0
  y = 0
  width = 0
  height = 0
  x1 = 0
  y1 = 0
  x2 = 0
  y2 = 0
  x3 = 0
  y3 = 0
  angle = 0
  fs = 12
  fn = "Trebuchet MS"
  fb = "False"
  fi = "False"
  txt = ""
  top = "True"
  bottom = "False"
  center = "True"
  stem = "True"
EndSub

Sub DrawGalaxy
  ox = 0
  oy = gh
  For i = 1 To 200
    rand = Math.GetRandomNumber(3)
    If rand = 1 Then
      GraphicsWindow.BrushColor = "#01FF0099"
    ElseIf rand = 2 Then
      GraphicsWindow.BrushColor = "#0100FF99"
    ElseIf rand = 3 Then
      GraphicsWindow.BrushColor = "#010000FF"
    EndIf
    rx = Math.GetRandomNumber(gw / 4) + gw * 3 / 4
    ry = Math.GetRandomNumber(gh / 4) + gh * 3 / 4
    a = Math.GetRandomNumber(100) - 1
    _a = Math.GetRadians(a)
    x = ox + rx * Math.Sin(_a)
    y = oy - ry * Math.Cos(_a)
    s = Math.GetRandomNumber(gh / 2)
    GraphicsWindow.FillEllipse(x - s / 2 , y - s / 2 , s, s)
  EndFor
EndSub

Sub DrawStars
  For i = 1 To 500
    h = Text.GetSubText("456789ABCDEF", Math.GetRandomNumber(12), 1)
    GraphicsWindow.BrushColor = "#" + h + h + "FFFFFF"
    x = Math.GetRandomNumber(gw) - 1
    y = Math.GetRandomNumber(gh) - 1
    s = Math.GetRandomNumber(3)
    GraphicsWindow.FillEllipse(x, y, s, s)
  EndFor
EndSub

Sub Group_Add
  ' Group | add shapes to a group
  ' param name - group name
  ' param shX, shY, origin of shape array
  ' param shape[] - shape array
  ' param nGroup - number of group
  ' return nGroup - updated number of group
  ' return group - group array
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  nGroup = nGroup + 1
  grp = ""
  grp["name"] = name
  grp["x"] = shX
  grp["y"] = shY
  grp["angle"] = 0
  grp["dir"] = 1
  Shapes_CalcWidthAndHeight()
  grp["width"] = shWidth
  grp["height"] = shHeight
  grp["cx"] = shWidth / 2
  grp["cy"] = shHeight / 2
  s = 1
  grp["scale"] = s
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    GraphicsWindow.PenWidth = shp["pw"] * s
    If shp["pw"] > 0 Then
      GraphicsWindow.PenColor = shp["pc"]
    EndIf
    If Text.IsSubText("rect|ell|tri|text|btn", shp["func"]) Then
      GraphicsWindow.BrushColor = shp["bc"]
    EndIf
    If Text.IsSubText("text|btn", shp["func"]) Then
      If silverlight Then
        fs = Math.Floor(shp["fs"] * 0.9)
      Else
        fs = shp["fs"]
      EndIf
      GraphicsWindow.FontSize = fs * s
      GraphicsWindow.FontName = shp["fn"]
      If shp["fb"] = "False" Then
        GraphicsWindow.FontBold = "False"
      Else
        GraphicsWindow.FontBold = "True"
      EndIf
    EndIf
    If shp["func"] = "rect" Then
      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "ell" Then
      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "tri" Then
      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)
    ElseIf shp["func"] = "line" Then
      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)
    ElseIf shp["func"] = "text" Then
      shp["obj"] = Shapes.AddText(shp["text"])
    EndIf
    x = shp["x"]
    y = shp["y"]
    shp["rx"] = x
    shp["ry"] = y
    If sbd And (shp["func"] = "line") Then
      shp["wx"] = x
      shp["wy"] = y
    ElseIf silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(shp["angle"])
      SB_RotateWorkaround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    If shp["func"] = "btn" Then
      shp["obj"] = Controls.AddButton(shp["caption"], shX + x * s, shY + y * s)
    Else
      Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    EndIf
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then
      Shapes.Rotate(shp["obj"], shp["angle"])
    EndIf
    shape[i] = shp
  EndFor
  grp["shape"] = shape
  group[nGroup] = grp
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub

Sub Group_Move
  ' Group | move a group
  ' param group[i] - group to move
  ' param x, y - position to move
  ' return group[i] - updated group
  Stack.PushValue("local", j)
  grp = group[i]
  s = grp["scale"]
  grp["x"] = x
  grp["y"] = y
  shape = grp["shape"]
  n = Array.GetItemCount(shape)
  For j = 1 To n
    shp = shape[j]
    If sbd And (shp["func"] = "line") Then
      _x = shp["wx"]
      _y = shp["wy"]
    ElseIf silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      _x = shp["wx"]
      _y = shp["wy"]
    Else
      _x = shp["rx"]
      _y = shp["ry"]
    EndIf
    _w2 = shp["width"] / 2
    _h2 = shp["height"] / 2
    Shapes.Move(shp["obj"], grp["x"] + (_x - _w2) * s + _w2, grp["y"]  + (_y - _h2) * s + _h2)
  EndFor
  group[i] = grp
  j = Stack.PopValue("local")
EndSub

Sub Group_Rotate
  ' Group | rotate a group
  ' param group[i] - group to move
  ' param cx, cy - rotation center (if given)
  ' param angle - to rotate
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  Stack.PushValue("local", n)
  grp = group[i]
  shape = grp["shape"]
  moved = "False"
  If cx <> "" Then
    moved = "True"
  Else
    cx = ""   ' to avoid syntax error
  EndIf
  If cy <> "" Then
    moved = "True"
  Else
    cy = ""   ' to avoid syntax error
  EndIf
  If moved Then
    param["x"] = grp["x"]
    param["y"] = grp["y"]
    param["cx"] = cx
    param["cy"] = cy
    param["width"] = grp["width"]
    param["height"] = grp["height"]
    param["scale"] = 1
    param["angle"] = angle
    Shapes_CalcRotateZoomPos()
    grp["x"] = x
    grp["y"] = y
  EndIf
  param["cx"] = grp["width"] / 2
  param["cy"] = grp["height"] / 2
  param["scale"] = grp["scale"]
  grp["angle"] = angle
  param["angle"] = grp["angle"]
  n = Array.GetItemCount(shape)
  Stack.PushValue("local", i)
  For i = 1 To n
    shp = shape[i]
    param["x"] = shp["x"]
    param["y"] = shp["y"]
    param["width"] = shp["width"]
    param["height"] = shp["height"]
    Shapes_CalcRotateZoomPos()
    shp["rx"] = x
    shp["ry"] = y
    alpha = shp["angle"] + grp["angle"]
    If sbd And (shp["func"] = "line") And (alpha <> 0) Then
      x1 = shp["x1"]
      y1 = shp["y1"]
      x2 = shp["x2"]
      y2 = shp["y2"]
      pw = shp["pw"]
      SB_LineWorkaround()
      shp["wx"] = x
      shp["wy"] = y
    ElseIf silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      _alpha = Math.GetRadians(alpha)
      SB_RotateWorkAround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    Shapes.Move(shp["obj"], grp["x"] + x, grp["y"] + y)
    Shapes.Rotate(shp["obj"], shp["angle"] + grp["angle"])
    shape[i] = shp
  EndFor
  i = Stack.PopValue("local")
  grp["shape"] = shape
  group[i] = grp
  n = Stack.PopValue("local")
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
EndSub

Sub Math_CartesianToPolar
  ' Math | convert cartesian coodinate to polar coordinate
  ' param x, y - cartesian coordinate
  ' return r, a - polar coordinate
  r = Math.SquareRoot(x * x + y * y)
  If x = 0 And y > 0 Then
    a = 90 ' [degree]
  ElseIf x = 0 And y < 0 Then
    a = -90
  ElseIf x = 0 Then
    a = 0
  Else
    a = Math.ArcTan(y / x) * 180 / Math.Pi
  EndIf
  If x < 0 Then
    a = a + 180
  ElseIf x > 0 And y < 0 Then
    a = a + 360
  EndIf
EndSub

Sub SB_LineWorkaround
  ' Small Basic | line rotate workaround for SBD
  ' param x, y - coordinate of the position of the line
  ' param x1, y1 - coordinate of the first point
  ' param x2, y2 - coordinate of the second point
  ' param pw - pen width
  ' param alpha - to rotate [degree]
  ' return x, y - workaround value for the coordinate
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  x = x1 - x2
  y = y1 - y2
  Math_CartesianToPolar()
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  _a = Math.GetRadians(a)
  _alpha = Math.GetRadians(a - alpha)
  Îx = pw / 4 * (Math.Sin(_alpha) - Math.Sin(_a))
  Îy = pw / 4 * (Math.Cos(_alpha) - Math.Cos(_a))
  x = x - Îx
  y = y - Îy
EndSub

Sub SB_RotateWorkaround
  ' Small Basic | rotate workaround for Silverlight
  ' param shp - current shape
  ' param x, y - original coordinate
  ' param _alpha - angle [radian]
  ' returns x, y - workaround coordinate
  If shp["func"] = "tri" Then
    x1 = -Math.Floor(shp["x3"] / 2)
    y1 = -Math.Floor(shp["y3"] / 2)
  ElseIf shp["func"] = "line" Then
    x1 = -Math.Floor(Math.Abs(shp["x1"] - shp["x2"]) / 2)
    y1 = -Math.Floor(Math.Abs(shp["y1"] - shp["y2"]) / 2)
  EndIf
  ox = x - x1
  oy = y - y1
  x = x1 * Math.Cos(_alpha) - y1 * Math.Sin(_alpha) + ox
  y = x1 * Math.Sin(_alpha) + y1 * Math.Cos(_alpha) + oy
EndSub

Sub SB_Workaround
  ' Small Basic | workaround for Silverlight / SBD
  ' return silverlight - "True" if in remote
  ' return sbd - "True" if in Small Basic Desktop
  color = GraphicsWindow.GetPixel(0, 0)
  sbd = "False"
  If Text.GetLength(color) > 7 Then
    silverlight = "True"
    msWait = 300
  Else
    silverlight = "False"
    gw = GraphicsWindow.Width
    gh = GraphicsWindow.Height
    If (gw = 624) And (gh = 441) Then
      sbd = "True"
    EndIf
  EndIf
EndSub

Sub Shapes_CalcRotateZoomPos
  ' Shapes | calculate position for rotated and zoomed shape
  ' param["x"], param["y"] - position of a shape
  ' param["width"], param["height"] - size of a shape
  ' param ["cx"], param["cy"] - center of rotation
  ' param ["angle"] - rotate angle
  ' param ["scale"] - zoom scale
  ' return x, y - rotated position of a shape
  _cx = param["x"] + param["width"] / 2
  _cy = param["y"] + param["height"] / 2
  x = _cx - param["cx"]
  y = _cy - param["cy"]
  Math_CartesianToPolar()
  a = a + param["angle"]
  x = r * Math.Cos(a * Math.Pi / 180) * param["scale"]
  y = r * Math.Sin(a * Math.Pi / 180) * param["scale"]
  _cx = x + param["cx"]
  _cy = y + param["cy"]
  x = _cx - param["width"] / 2
  y = _cy - param["height"] / 2
EndSub

Sub Shapes_CalcWidthAndHeight
  ' Shapes | calculate total width and height of shapes
  ' param shape[] - shape array
  ' return shWidth, shHeight - total size of shapes
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    If shp["func"] = "tri" Or shp["func"] = "line" Then
      xmin = shp["x1"]
      xmax = shp["x1"]
      ymin = shp["y1"]
      ymax = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If xmax < shp["x2"] Then
        xmax = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If ymax < shp["y2"] Then
        ymax = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If xmax < shp["x3"] Then
          xmax = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        If ymax < shp["y3"] Then
          ymax = shp["y3"]
        EndIf
      EndIf
      shp["width"] = xmax - xmin
      shp["height"] = ymax - ymin
    ElseIf shp["func"] = "text" Then
      shp["height"] = shp["fs"]
      shp["width"] = shp["fs"] * 0.6
    EndIf
    If i = 1 Then
      shWidth = shp["x"] + shp["width"]
      shHeight = shp["y"] + shp["height"]
    Else
      If shWidth < shp["x"] + shp["width"] Then
        shWidth = shp["x"] + shp["width"]
      EndIf
      If shHeight < shp["y"] + shp["height"] Then
        shHeight = shp["y"] + shp["height"]
      EndIf
    EndIf
    shape[i] = shp
  EndFor
EndSub

Sub Shapes_Init_TB3
  ' Shapes | initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = gw - 250  ' x offset
  shY = 95        ' y offset
  shape = ""
  shape[1] = "func=ell;x=35;y=26.92;width=30;height=130;pw=0;bc=OrangeRed;"
  shape[2] = "func=tri;x=39.39;y=0.00;x1=10.6;y1=0;x2=0;y2=45.96;x3=21.21;y3=45.96;pw=0;bc=OrangeRed;"
  shape[3] = "func=rect;x=35;y=91.92;width=30;height=160;pw=0;bc=OrangeRed;"
  shape[4] = "func=ell;x=42;y=276.92;width=10;height=40;pw=0;bc=OrangeRed;"
  shape[5] = "func=tri;x=43.46;y=268.64;x1=3.53;y1=0;x2=0;y2=14.14;x3=7.07;y3=14.14;pw=0;bc=OrangeRed;"
  shape[6] = "func=tri;x=43.46;y=311.06;x1=3.53;y1=0;x2=0;y2=14.14;x3=7.07;y3=14.14;angle=180;pw=0;bc=OrangeRed;"
  shape[7] = "func=rect;x=47;y=283.92;width=6;height=40;pw=0;bc=OrangeRed;"
  shape[8] = "func=ell;x=48;y=276.92;width=10;height=40;pw=0;bc=OrangeRed;"
  shape[9] = "func=tri;x=49.46;y=268.64;x1=3.53;y1=0;x2=0;y2=14.14;x3=7.07;y3=14.14;pw=0;bc=OrangeRed;"
  shape[10] = "func=tri;x=49.46;y=311.06;x1=3.53;y1=0;x2=0;y2=14.14;x3=7.07;y3=14.14;angle=180;pw=0;bc=OrangeRed;"
  shape[11] = "func=tri;x=44;y=316.92;x1=2;y1=0;x2=0;y2=8;x3=4;y3=8;angle=180;pw=0;bc=#DDDDDD;"
  shape[12] = "func=rect;x=46;y=316.92;width=8;height=8;angle=180;pw=0;bc=#DDDDDD;"
  shape[13] = "func=tri;x=52;y=316.92;x1=2;y1=0;x2=0;y2=8;x3=4;y3=8;angle=180;pw=0;bc=#DDDDDD;"
  shape[14] = "func=rect;x=30;y=91.92;width=40;height=10;pw=0;bc=White;"
  shape[15] = "func=ell;x=25;y=291.92;width=50;height=20;pw=0;bc=Gray;"
  shape[16] = "func=rect;x=25;y=251.92;width=50;height=50;pw=0;bc=OrangeRed;"
  shape[17] = "func=tri;x=25;y=231.92;x1=10;y1=0;x2=0;y2=20;x3=20;y3=20;pw=0;bc=OrangeRed;"
  shape[18] = "func=tri;x=55;y=231.92;x1=10;y1=0;x2=0;y2=20;x3=20;y3=20;pw=0;bc=OrangeRed;"
  shape[19] = "func=rect;x=65;y=279.92;width=30;height=20;angle=30;pw=0;bc=OrangeRed;"
  shape[20] = "func=rect;x=5;y=279.92;width=30;height=20;angle=-30;pw=0;bc=OrangeRed;"
  shape[21] = "func=ell;x=0;y=276.92;width=10;height=40;pw=0;bc=OrangeRed;"
  shape[22] = "func=tri;x=1.46;y=268.64;x1=3.53;y1=0;x2=0;y2=14.14;x3=7.07;y3=14.14;pw=0;bc=OrangeRed;"
  shape[23] = "func=tri;x=1.46;y=311.06;x1=3.53;y1=0;x2=0;y2=14.14;x3=7.07;y3=14.14;angle=180;pw=0;bc=OrangeRed;"
  shape[24] = "func=ell;x=6;y=276.92;width=10;height=40;pw=0;bc=OrangeRed;"
  shape[25] = "func=tri;x=7.46;y=268.64;x1=3.53;y1=0;x2=0;y2=14.14;x3=7.07;y3=14.14;pw=0;bc=OrangeRed;"
  shape[26] = "func=tri;x=7.46;y=311.06;x1=3.53;y1=0;x2=0;y2=14.14;x3=7.07;y3=14.14;angle=180;pw=0;bc=OrangeRed;"
  shape[27] = "func=ell;x=90;y=276.92;width=10;height=40;pw=0;bc=OrangeRed;"
  shape[28] = "func=tri;x=91.46;y=268.64;x1=3.53;y1=0;x2=0;y2=14.14;x3=7.07;y3=14.14;pw=0;bc=OrangeRed;"
  shape[29] = "func=tri;x=91.46;y=311.06;x1=3.53;y1=0;x2=0;y2=14.14;x3=7.07;y3=14.14;angle=180;pw=0;bc=OrangeRed;"
  shape[30] = "func=ell;x=84;y=276.92;width=10;height=40;pw=0;bc=OrangeRed;"
  shape[31] = "func=tri;x=85.46;y=268.64;x1=3.53;y1=0;x2=0;y2=14.14;x3=7.07;y3=14.14;pw=0;bc=OrangeRed;"
  shape[32] = "func=tri;x=85.46;y=311.06;x1=3.53;y1=0;x2=0;y2=14.14;x3=7.07;y3=14.14;angle=180;pw=0;bc=OrangeRed;"
  shape[33] = "func=line;x=8;y=171.92;x1=0;y1=0;x2=0;y2=150;pw=4;pc=OrangeRed;"
  shape[34] = "func=line;x=92;y=171.92;x1=0;y1=0;x2=0;y2=150;pw=4;pc=OrangeRed;"
  shape[35] = "func=line;x=7.92;y=135.77;x1=32.14;y1=0;x2=0.00;y2=38.3;pw=4;pc=OrangeRed;"
  shape[36] = "func=line;x=59.92;y=135.77;x1=0.00;y1=0;x2=32.14;y2=38.3;pw=4;pc=OrangeRed;"
  shape[37] = "func=tri;x=18;y=119.92;x1=5;y1=0;x2=0;y2=60;x3=10;y3=60;angle=-144;pw=0;bc=OrangeRed;"
  shape[38] = "func=tri;x=72;y=119.92;x1=5;y1=0;x2=0;y2=60;x3=10;y3=60;angle=144;pw=0;bc=OrangeRed;"
  shape[39] = "func=tri;x=2;y=269.92;x1=2;y1=0;x2=0;y2=8;x3=4;y3=8;pw=0;bc=White;"
  shape[40] = "func=rect;x=4;y=269.92;width=8;height=8;pw=0;bc=White;"
  shape[41] = "func=tri;x=10;y=269.92;x1=2;y1=0;x2=0;y2=8;x3=4;y3=8;pw=0;bc=White;"
  shape[42] = "func=tri;x=2;y=316.92;x1=2;y1=0;x2=0;y2=8;x3=4;y3=8;angle=180;pw=0;bc=White;"
  shape[43] = "func=rect;x=4;y=316.92;width=8;height=8;angle=180;pw=0;bc=White;"
  shape[44] = "func=tri;x=10;y=316.92;x1=2;y1=0;x2=0;y2=8;x3=4;y3=8;angle=180;pw=0;bc=White;"
  shape[45] = "func=tri;x=86;y=269.92;x1=2;y1=0;x2=0;y2=8;x3=4;y3=8;pw=0;bc=White;"
  shape[46] = "func=rect;x=88;y=269.92;width=8;height=8;pw=0;bc=White;"
  shape[47] = "func=tri;x=94;y=269.92;x1=2;y1=0;x2=0;y2=8;x3=4;y3=8;pw=0;bc=White;"
  shape[48] = "func=tri;x=86;y=316.92;x1=2;y1=0;x2=0;y2=8;x3=4;y3=8;angle=180;pw=0;bc=White;"
  shape[49] = "func=rect;x=88;y=316.92;width=8;height=8;angle=180;pw=0;bc=White;"
  shape[50] = "func=tri;x=94;y=316.92;x1=2;y1=0;x2=0;y2=8;x3=4;y3=8;angle=180;pw=0;bc=White;"
  shape[51] = "func=tri;x=30;y=176.92;x1=5;y1=0;x2=0;y2=10;x3=10;y3=10;pw=0;bc=Gray;"
  shape[52] = "func=rect;x=35;y=176.92;width=30;height=10;pw=0;bc=Gray;"
  shape[53] = "func=tri;x=60;y=176.92;x1=5;y1=0;x2=0;y2=10;x3=10;y3=10;pw=0;bc=Gray;"
  shape[54] = "func=tri;x=20;y=186.92;x1=10;y1=0;x2=0;y2=35;x3=20;y3=35;pw=0;bc=DimGray;"
  shape[55] = "func=rect;x=30;y=186.92;width=40;height=35;pw=0;bc=DimGray;"
  shape[56] = "func=tri;x=60;y=186.92;x1=10;y1=0;x2=0;y2=35;x3=20;y3=35;pw=0;bc=DimGray;"
  shape[57] = "func=tri;x=20;y=221.92;x1=15;y1=0;x2=0;y2=5;x3=30;y3=5;angle=180;pw=0;bc=DimGray;"
  shape[58] = "func=rect;x=35;y=221.92;width=30;height=5;angle=180;pw=0;bc=DimGray;"
  shape[59] = "func=tri;x=50;y=221.92;x1=15;y1=0;x2=0;y2=5;x3=30;y3=5;angle=180;pw=0;bc=DimGray;"
  shape[60] = "func=line;x=21.01;y=186.91;x1=9.66;y1=0.00;x2=0.00;y2=35.00;pw=2;pc=Gray;"
  shape[61] = "func=line;x=28.77;y=186.91;x1=7.08;y1=0.00;x2=0.00;y2=35.00;pw=2;pc=Gray;"
  shape[62] = "func=line;x=42.23;y=186.91;x1=2.58;y1=0.00;x2=0;y2=35.00;pw=2;pc=Gray;"
  shape[63] = "func=line;x=55.17;y=186.91;x1=0;y1=0.00;x2=2.58;y2=35.00;pw=2;pc=Gray;"
  shape[64] = "func=line;x=64.13;y=186.91;x1=0.00;y1=0.00;x2=7.08;y2=35.00;pw=2;pc=Gray;"
  shape[65] = "func=line;x=69.31;y=186.91;x1=0;y1=0.00;x2=9.65;y2=35.00;pw=2;pc=Gray;"
  shape[66] = "func=line;x=32;y=126.92;x1=0;y1=0;x2=0;y2=13;pw=2;pc=Gray;"
  shape[67] = "func=line;x=27;y=135.92;x1=0;y1=0;x2=0;y2=11;pw=2;pc=Gray;"
  shape[68] = "func=line;x=22;y=144.92;x1=0;y1=0;x2=0;y2=9;pw=2;pc=Gray;"
  shape[69] = "func=line;x=17;y=153.92;x1=0;y1=0;x2=0;y2=7;pw=2;pc=Gray;"
  shape[70] = "func=line;x=12;y=162.92;x1=0;y1=0;x2=0;y2=5;pw=2;pc=Gray;"
  shape[71] = "func=line;x=68;y=126.92;x1=0;y1=0;x2=0;y2=13;pw=2;pc=Gray;"
  shape[72] = "func=line;x=73;y=135.92;x1=0;y1=0;x2=0;y2=11;pw=2;pc=Gray;"
  shape[73] = "func=line;x=78;y=144.92;x1=0;y1=0;x2=0;y2=9;pw=2;pc=Gray;"
  shape[74] = "func=line;x=83;y=153.92;x1=0;y1=0;x2=0;y2=7;pw=2;pc=Gray;"
  shape[75] = "func=line;x=88;y=162.92;x1=0;y1=0;x2=0;y2=5;pw=2;pc=Gray;"
  shape[76] = "func=text;x=35;y=263;text=3;fs=30;fn=Arial;angle=90;bc=#FFFFFF;"
EndSub

Sub Shapes_AddEllipse
  ' Shapes | Add ellipse
  ' param x, y - top left position
  ' param width
  ' param height
  Shapes_EntryClear()
  Shapes_PenToEntry()
  Shapes_BrushToEntry()
  func = "ell"
  Shapes_FuncToEntry()
  Shapes_MoveToEntry()
  Shapes_RotateToEntry()
  Shapes_EntryToArray()
EndSub

Sub Shapes_AddLeaf
  ' Shapes | Add leaf
  ' param x, y - the center of the leaf
  ' param width - the width of the leaf
  ' param height - the height of the ellipse in the leaf
  ' param stem - the length of the stem
  ' param pc - pen color for the border, the midvein and the stem 
  ' param bc - brush color for the leaf
  ' param top - "True" if the top angle needed
  ' param bottom - "True" if the bottm angle needed
  ' param center = "True" if the midvein needed
  sqr2 = Math.SquareRoot(2)
  tw = width / sqr2
  th = height / sqr2 / 2
  _bc = bc
  _pc = pc
  _pw = pw
  _x = x
  _y = y
  x = _x - width / 2
  y = _y - height / 2
  i = 0
  Shapes_AddEllipse()
  x1 = tw / 2
  y1 = 0
  x2 = 0
  y2 = th
  x3 = tw
  y3 = th
  s = Math.SquareRoot(width * width + height * height)
  w = pw * width / s
  h = pw * height / s
  If top Then
    pw = 0
    angle = 0
    x = _x - tw / 2
    y = _y - th * 2
    ty = y + h
    Shapes_AddTriangle()
    If 0 < _pw Then 
      pw = _pw
      y1 = h
      x2 = w / 2
      y2 = th + h / 2
      Shapes_AddLine()
      x2 = tw - w / 2
      Shapes_AddLine()
      bc = _pc
      pw = 0
      x1 = w
      y1 = 0
      x2 = 0
      y2 = h
      x3 = 2 * w
      y3 = h
      x = _x - w
      Shapes_AddTriangle()
    EndIf
  Else
    ty = _y - height / 2 + pw / 2
  EndIf
  bc = _bc
  x1 = tw / 2
  y1 = 0
  x2 = 0
  y2 = th
  x3 = tw
  y3 = th
  If bottom Then
    angle = 180
    x = _x - tw / 2
    y = _y + th
    pw = 0
    Shapes_AddTriangle()
    If 0 < _pw Then
      angle = 0
      y1 = th - h
      x2 = w / 2
      y2 = -h / 2
      pw = _pw
      Shapes_AddLine()
      x2 = tw - w / 2
      y2 = -h / 2
      Shapes_AddLine()
      angle = 180
      pw = 0
      bc = _pc
      x1 = w
      y1 = 0
      x2 = 0
      y2 = h
      x3 = 2 * w
      y3 = h
      x = _x - w
      by = _y + 2 * th - h
      y = by
      Shapes_AddTriangle()
    EndIf
  Else
    by = _y + height / 2 - pw / 2
  EndIf
  pw = _pw
  angle = 0
  If center Or (0 < stem) Then
    x = _x
    If center Then
      y = ty
    Else
      y = by
    EndIf
    x1 = 0
    y1 = 0
    x2 = 0
    If center Then
      y2 = by - ty + stem
    Else
      y2 = stem
    EndIf
    Shapes_AddLine()
  EndIf
  x = _x
  y = _y
EndSub

Sub Shapes_AddLine
  ' Shapes | Add line
  ' param x, y - position
  ' param x1, y1 - first point
  ' param x2, y2 - second point
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  Stack.PushValue("local", x1)
  Stack.PushValue("local", y1)
  Stack.PushValue("local", x2)
  Stack.PushValue("local", y2)
  Stack.PushValue("local", angle)
  If angle <> 0 Then
    _angle = angle * Math.Pi / 180
    cx = (x1 + x2) / 2
    cy = (y1 + y2) / 2
    u1 = x1 - cx
    v1 = y1 - cy
    x1 = cx + Math.Cos(_angle) * u1 - Math.Sin(_angle) * v1
    y1 = cy + Math.Sin(_angle) * u1 + Math.Cos(_angle) * v1
    u2 = x2 - cx
    v2 = y2 - cy
    x2 = cx + Math.Cos(_angle) * u2 - Math.Sin(_angle) * v2
    y2 = cy + Math.Sin(_angle) * u2 + Math.Cos(_angle) * v2
    x1 = x1 + x
    x2 = x2 + x
    x = Math.Min(x1, x2)
    y1 = y1 + y
    y2 = y2 + y
    y = Math.Min(y1, y2)
    x1 = x1 - x
    x2 = x2 - x
    y1 = y1 - y
    y2 = y2 - y
    angle = 0
  EndIf
  Shapes_EntryClear()
  Shapes_PenToEntry()
  func = "line"
  Shapes_FuncToEntry()
  Shapes_MoveToEntry()
  Shapes_RotateToEntry()
  Shapes_EntryToArray()
  angle = Stack.PopValue("local")
  y2 = Stack.PopValue("local")
  x2 = Stack.PopValue("local")
  y1 = Stack.PopValue("local")
  x1 = Stack.PopValue("local")
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
EndSub

Sub Shapes_AddParallelogram
  ' Shapes | Add parallelogram
  ' param x, y - top left position
  ' param width
  ' param height
  ' param ratio
  _angle = angle
  _width = width
  _ratio = ratio
  If ratio = "" Then
    ratio = 0.25
  EndIf
  _x = x
  x1 = Math.Round(height * ratio)
  y1 = 0
  x2 = 0
  y2 = height
  x3 = Math.Round(height * ratio * 2)
  y3 = height
  Shapes_AddTriangle()
  x = x + x1
  width = width - x3
  Shapes_AddRectangle()
  x = _x + width
  angle = 180
  Shapes_AddTriangle()
  x = _x
  width = _width
  ratio = _ratio
  angle = _angle
EndSub

Sub Shapes_AddRectangle
  ' Shapes | Add rectangle
  ' param x, y - top left position
  ' param width
  ' param height
  Shapes_EntryClear()
  Shapes_PenToEntry()
  Shapes_BrushToEntry()
  func = "rect"
  Shapes_FuncToEntry()
  Shapes_MoveToEntry()
  Shapes_RotateToEntry()
  Shapes_EntryToArray()
EndSub

Sub Shapes_AddTrapezoid
  ' Shapes | Add trapezoid
  ' param x, y - top left position
  ' param width
  ' param height
  ' param ratio
  _width = width
  _ratio = ratio
  If ratio = "" Then
    ratio = 0.25
  EndIf
  _x = x
  x1 = Math.Round(height * ratio)
  y1 = 0
  x2 = 0
  y2 = height
  x3 = Math.Round(height * ratio * 2)
  y3 = height
  Shapes_AddTriangle()
  x = x + x1
  width = width - x3
  Shapes_AddRectangle()
  x = _x + width
  Shapes_AddTriangle()
  x = _x
  width = _width
  ratio = _ratio
EndSub

Sub Shapes_AddText
  ' Shapes | Add text
  ' param x, y - top left position
  ' param txt - text
  Shapes_EntryClear()
  Shapes_PenToEntry()
  Shapes_BrushToEntry()
  Shapes_FontToEntry()
  func = "text"
  Shapes_FuncToEntry()
  Shapes_MoveToEntry()
  Shapes_RotateToEntry()
  Shapes_EntryToArray()
EndSub

Sub Shapes_AddTriangle
  ' Shapes | Add triangle
  ' param x1, y1 - first point
  ' param x2, y2 - second point
  ' param x3, y3 - third point
  Shapes_EntryClear()
  Shapes_PenToEntry()
  Shapes_BrushToEntry()
  func = "tri"
  Shapes_FuncToEntry()
  Shapes_MoveToEntry()
  Shapes_RotateToEntry()
  Shapes_EntryToArray()
EndSub

Sub Shapes_BrushToEntry
  ' Shapes | Set brush to shapes entry
  GraphicsWindow.BrushColor = bc
  shp["bc"] = bc
EndSub

Sub Shapes_DumpArray
  ' Shapes | Dump shapes array
  order = "1=func;2=x;3=y;4=width;5=height;6=x1;7=y1;8=x2;9=y2;"
  order = order + "10=x3;11=y3;12=txt;13=fn;14=fs;15=fb;16=fi;"
  order = order + "17=angle;18=pw;19=pc;20=bc;"
  nOrder = Array.GetItemCount(order)
  WQ = Text.GetCharacter(34)
  LF = Text.GetCharacter(10)
  GraphicsWindow.BrushColor = "Black"
  GraphicsWindow.FontName = "Consolas"
  GraphicsWindow.FontSize = 14
  tbox = Controls.AddMultiLineTextBox(gw / 2, 10)
  Controls.SetSize(tbox, gw / 2 - 10, gh - 20)
  buf = "  shX = " + shX + " ' x offset" + LF
  buf = buf + "  shY = " + shY + " ' y offset" + LF
  buf = buf + "  shape = " + WQ + WQ + LF
  For i = iMin To iMax
    buf = buf + "  shape[" + i + "] = " + WQ
    shp = shape[i]
    For j = 1 To nOrder
      If shp[order[j]] <> "" Then
        buf = buf + order[j] + "=" + shp[order[j]] + ";"
      EndIf
    EndFor
    buf = buf + WQ + LF
  EndFor
  Controls.SetTextBoxText(tbox, buf)
  Shapes.SetOpacity(tbox, 50)
EndSub

Sub Shapes_EntryClear
  ' Shapes | Clear shapes entry
  shp = ""
EndSub

Sub Shapes_EntryToArray
  ' Shapes | Set entry to shapes array
  iMax = iMax + 1
  shape[iMax] = shp
EndSub

Sub Shapes_FontToEntry
  ' Shapes | Set font to shapes entry
  GraphicsWindow.FontSize = fs
  shp["fs"] = fs
  GraphicsWindow.FontName = fn
  shp["fn"] = fn
  GraphicsWindow.FontBold = fb
  shp["fb"] = fb
  GraphicsWindow.FontItalic = fi
  shp["fi"] = fi
EndSub

Sub Shapes_FuncToEntry
  ' Shapes | Set function to shapes entry
  shp["func"] = func
  If func = "ell" Then
    obj = Shapes.AddEllipse(width, height)
    shp["width"] = Math.Floor(width * 100) / 100
    shp["height"] = Math.Floor(height * 100) / 100
  ElseIf func = "rect" Then
    obj = Shapes.AddRectangle(width, height)
    shp["width"] = Math.Floor(width * 100) / 100
    shp["height"] = Math.Floor(height * 100) / 100
  ElseIf func = "tri" Then
    obj = Shapes.AddTriangle(x1, y1, x2, y2, x3, y3)
    shp["x1"] = Math.Floor(x1 * 100) / 100
    shp["y1"] = Math.Floor(y1 * 100) / 100
    shp["x2"] = Math.Floor(x2 * 100) / 100
    shp["y2"] = Math.Floor(y2 * 100) / 100
    shp["x3"] = Math.Floor(x3 * 100) / 100
    shp["y3"] = Math.Floor(y3 * 100) / 100
  ElseIf func = "line" Then
    obj = Shapes.AddLine(x1, y1, x2, y2)
    shp["x1"] = Math.Floor(x1 * 100) / 100
    shp["y1"] = Math.Floor(y1 * 100) / 100
    shp["x2"] = Math.Floor(x2 * 100) / 100
    shp["y2"] = Math.Floor(y2 * 100) / 100
  ElseIf func = "text" Then
    obj = Shapes.AddText(txt)
    shp["text"] = txt
  EndIf
EndSub

Sub Shapes_MoveToEntry
  ' Shapes | Set position to shapes entry
  Shapes.Move(obj, x, y)
  shp["x"] = Math.Floor(x * 100) / 100
  shp["y"] = Math.Floor(y * 100) / 100
EndSub

Sub Shapes_Normalize
  ' Shapes | Format shapes entries as normalized
  For i = 1 To iMax
    shp = shape[i]
    If Text.IsSubText("line|tri", shp["func"]) Then
      xmin = shp["x1"]
      ymin = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        shp["x3"] = shp["x3"] - xmin
        shp["y3"] = shp["y3"] - ymin
      EndIf
      shp["x"] = shp["x"] + xmin
      shp["y"] = shp["y"] + ymin
      shp["x1"] = shp["x1"] - xmin
      shp["y1"] = shp["y1"] - ymin
      shp["x2"] = shp["x2"] - xmin
      shp["y2"] = shp["y2"] - ymin
      shape[i] = shp
    EndIf
  EndFor
  If 0 < iMax Then
    shp = shape[1]
    xmin = shp["x"]
    ymin = shp["y"]
    xmax = shp["x"]
    ymax = shp["y"]
  EndIf
  For i = 2 To iMax
    shp = shape[i]
    If shp["x"] < xmin Then
      xmin = shp["x"]
    EndIf
    If shp["y"] < ymin Then
      ymin = shp["y"]
    EndIf
    If xmax < shp["x"] Then
      xmax = shp["x"]
    EndIf
    If ymax < shp["y"] Then
      ymax = shp["y"]
    EndIf
  EndFor
  shX = xmin
  shY = ymin
  For i = 1 To iMax
    shp = shape[i]
    shp["x"] = shp["x"] - xmin
    shp["y"] = shp["y"] - ymin
    If shp["angle"] = 0 Then
      shp["angle"] = ""
    EndIf
    shape[i] = shp
  EndFor
EndSub

Sub Shapes_PenToEntry
  ' Shapes | Set pen to shapes entry
  GraphicsWindow.PenWidth = pw
  shp["pw"] = pw
  If 0 < pw Then 
    GraphicsWindow.PenColor = pc
    shp["pc"] = pc
  EndIf
EndSub

Sub Shapes_RotateToEntry
  ' Shapes | Set angle to shapes entry
  If angle <> 0 Then
    Shapes.Rotate(obj, angle)
    shp["angle"] = Math.Floor(angle * 100) / 100
  EndIf
EndSub
    