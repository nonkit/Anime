' Small Basic Hackathon
' Copyright Â© 2019 Nonki Takahashi. The MIT License.
' Last update 2019-10-19

SB_Workaround()
Init()
' initialize shapes
Shapes_Init_Logo()
' add shapes
scale = 1
name = "Logo"
Group_Add()
i = nGroup
angle = 30
Group_Flip()

Sub Init
  gw = GraphicsWindow.Width
  gh = GraphicsWindow.Height
  GraphicsWindow.Title = "Small Basic Hackathon"
EndSub

Sub Color_ColorToRGB
  ' Color | convert color To RGB values
  ' param c - "#rrggbb" (hexadecimal values)
  ' return r, g, b - RGB values 0..255
  If Text.GetLength(c) = 9 Then
    _alpha = 2
  Else
    _alpha = 0
  EndIf
  hex = Text.GetSubText(c, _alpha + 2, 2)
  Math_Hex2Dec()
  r = dec
  hex = Text.GetSubText(c, _alpha + 4, 2)
  Math_Hex2Dec()
  g = dec
  hex = Text.GetSubText(c, _alpha + 6, 2)
  Math_Hex2Dec()
  b = dec
EndSub

Sub Color_NameToColor
  ' Color | convert color name to color
  ' param c - color name
  ' returns c -"#rrggbb"
  If Text.StartsWith(c, "#") And 6 < Text.GetLength(c) Then
    c = Text.ConvertToUpperCase(c)
  Else
    Stack.PushValue("local", GraphicsWindow.PenColor)
    GraphicsWindow.PenColor = c
    c = GraphicsWindow.PenColor
    GraphicsWindow.PenColor = Stack.PopValue("local")
  EndIf
EndSub

Sub Group_Add
  ' Group | add shapes to a group
  ' param name - group name
  ' param shX, shY, origin of shape array
  ' param shape[] - shape array
  ' param scale - to resize
  ' param nGroup - number of group
  ' return nGroup - updated number of group
  ' return group - group array
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  nGroup = nGroup + 1
  grp = ""
  grp["name"] = name
  grp["x"] = shX
  grp["y"] = shY
  grp["angle"] = 0
  grp["dir"] = 1
  Shapes_CalcWidthAndHeight()
  grp["width"] = shWidth
  grp["height"] = shHeight
  grp["cx"] = shWidth / 2
  grp["cy"] = shHeight / 2
  s = scale
  grp["scale"] = s
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    GraphicsWindow.PenWidth = shp["pw"] * s
    If shp["pw"] > 0 Then
      GraphicsWindow.PenColor = shp["pc"]
    EndIf
    If Text.IsSubText("rect|ell|tri|text|btn", shp["func"]) Then
      GraphicsWindow.BrushColor = shp["bc"]
    EndIf
    If Text.IsSubText("text|btn", shp["func"]) Then
      If silverlight Then
        fs = Math.Floor(shp["fs"] * 0.9)
      Else
        fs = shp["fs"]
      EndIf
      GraphicsWindow.FontSize = fs * s
      GraphicsWindow.FontName = shp["fn"]
      If shp["fb"] = "False" Then
        GraphicsWindow.FontBold = "False"
      Else
        GraphicsWindow.FontBold = "True"
      EndIf
    EndIf
    If shp["func"] = "rect" Then
      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "ell" Then
      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "tri" Then
      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)
    ElseIf shp["func"] = "line" Then
      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)
    ElseIf shp["func"] = "text" Then
      shp["obj"] = Shapes.AddText(shp["text"])
    EndIf
    x = shp["x"]
    y = shp["y"]
    shp["rx"] = x
    shp["ry"] = y
    If sbd And (shp["func"] = "line") Then
      shp["wx"] = x
      shp["wy"] = y
    ElseIf silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      _alpha = Math.GetRadians(shp["angle"])
      SB_RotateWorkaround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    If shp["func"] = "btn" Then
      shp["obj"] = Controls.AddButton(shp["caption"], shX + x * s, shY + y * s)
    Else
      Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    EndIf
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then
      Shapes.Rotate(shp["obj"], shp["angle"])
    EndIf
    shape[i] = shp
  EndFor
  grp["shape"] = shape
  group[nGroup] = grp
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub

Sub Group_Flip
  ' Group | flip a group
  ' param group[i] - group to flip
  ' param angle - to flip
  ' return group[i] - flipped group
  Stack.PushValue("local", angle)
  grp = group[i]
  gx = grp["x"]
  gy = grp["y"]
  shape = grp["shape"]
  n = Array.GetItemCount(shape)
  angle = Math.Remainder(angle, 360)
  If angle < 0 Then
    angle = angle + 360
  EndIf
  If (angle <= 90) Or (270 < angle) Then
    sign = 1
  Else
    sign = -1
  EndIf
  If (grp["flip"] <= 90) Or (270 < grp["flip"]) Then
    lastSign = 1
  Else
    lastSign = -1
  EndIf
  _a = Math.GetRadians(angle)
  scaleX = Math.Cos(_a)
  For j = 1 To n
    shp = shape[j]
    Shapes.Zoom(shp["obj"], Math.Abs(scaleX), 1)
    cx = shp["x"] + shp["width"] / 2
    fx = (cx - grp["cx"]) * scaleX + grp["cx"]
    Shapes.Move(shp["obj"], fx - shp["width"] / 2 + gx, shp["y"] + gy)
    If sign <> lastSign Then
      If shp["angle"] <> "" Then
        shp["angle"] = -shp["angle"]
        Shapes.Rotate(shp["obj"], shp["angle"])
      EndIf
      _x = Math.Floor((cx - shp["width"] / 2) * 100) / 100
      shp["rx"] = _x
      shp["x"] = _x
      shape[j] = shp
    EndIf
  EndFor
  grp["flip"] = angle
  grp["shape"] = shape
  group[i] = grp
  angle = Stack.PopValue("local")
EndSub

Sub Group_Move
  ' Group | move a group
  ' param group[i] - group To move
  ' param x, y - position To move
  ' return group[i] - updated group
  Stack.PushValue("local", j)
  grp = group[i]
  s = grp["scale"]
  grp["x"] = x
  grp["y"] = y
  shape = grp["shape"]
  n = Array.GetItemCount(shape)
  For j = 1 To n
    shp = shape[j]
    If sbd And (shp["func"] = "line") Then
      _x = shp["wx"]
      _y = shp["wy"]
    ElseIf silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      _x = shp["wx"]
      _y = shp["wy"]
    Else
      _x = shp["rx"]
      _y = shp["ry"]
    EndIf
    _w2 = shp["width"] / 2
    _h2 = shp["height"] / 2
    Shapes.Move(shp["obj"], grp["x"] + (_x - _w2) * s + _w2, grp["y"]  + (_y - _h2) * s + _h2)
  EndFor
  group[i] = grp
  j = Stack.PopValue("local")
EndSub

Sub Math_CartesianToPolar
  ' Math | convert cartesian coodinate to polar coordinate
  ' param x, y - cartesian coordinate
  ' return r, a - polar coordinate
  r = Math.SquareRoot(x * x + y * y)
  If x = 0 And y > 0 Then
    a = 90 ' [degree]
  ElseIf x = 0 And y < 0 Then
    a = -90
  Else
    a = Math.ArcTan(y / x) * 180 / Math.Pi
  EndIf
  If x < 0 Then
    a = a + 180
  ElseIf x > 0 And y < 0 Then
    a = a + 360
  EndIf
EndSub

Sub Math_Hex2Dec
  ' Math | convert hexadecimal to decimal
  ' param hex
  ' returns dec
  dec = 0
  len = Text.GetLength(hex)
  For ptr = 1 To len
    dec = dec * 16 + Text.GetIndexOf("123456789ABCDEF", Text.GetSubText(hex, ptr, 1))
  EndFor
EndSub

Sub SB_RotateWorkaround
  ' Small Basic | rotate workaround for Silverlight
  ' param x, y - original coordinate
  ' param alpha - angle [radian]
  ' returns x, y - workaround coordinate
  If shape[i]["func"] = "tri" Then
    x1 = -Math.Floor(shape[i]["x3"] / 2)
    y1 = -Math.Floor(shape[i]["y3"] / 2)
  ElseIf shape[i]["func"] = "line" Then
    x1 = -Math.Floor(Math.Abs(shape[i]["x1"] - shape[i]["x2"]) / 2)
    y1 = -Math.Floor(Math.Abs(shape[i]["y1"] - shape[i]["y2"]) / 2)
  EndIf
  ox = x - x1
  oy = y - y1
  x = x1 * Math.Cos(_alpha) - y1 * Math.Sin(_alpha) + ox
  y = x1 * Math.Sin(_alpha) + y1 * Math.Cos(_alpha) + oy
EndSub

Sub SB_Workaround
  ' Small Basic | workaround for Silverlight / SBD
  ' return silverlight - "True" if in remote
  ' return sbd - "True" if Small Basic Desktop
  color = GraphicsWindow.GetPixel(0, 0)
  sbd = "False"
  If Text.GetLength(color) > 7 Then
    silverlight = "True"
    msWait = 300
  Else
    silverlight = "False"
    _gw = GraphicsWindow.Width
    _gh = GraphicsWindow.Height
    If (_gw = 624) And (_gh = 441) Then
      sbd = "True"
    EndIf
  EndIf
EndSub

Sub Shapes_CalcRotatePos
  ' Shapes | Calculate position for rotated shape
  ' param["x"], param["y"] - position of a shape
  ' param["width"], param["height"] - size of a shape
  ' param ["cx"], param["cy"] - center of rotation
  ' param ["angle"] - rotate angle
  ' return x, y - rotated position of a shape
  param = param ' dummy
  _cx = param["x"] + param["width"] / 2
  _cy = param["y"] + param["height"] / 2
  x = _cx - param["cx"]
  y = _cy - param["cy"]
  Math_CartesianToPolar()
  a = a + param["angle"]
  x = r * Math.Cos(a * Math.Pi / 180)
  y = r * Math.Sin(a * Math.Pi / 180)
  _cx = x + param["cx"]
  _cy = y + param["cy"]
  x = _cx - param["width"] / 2
  y = _cy - param["height"] / 2
EndSub

Sub Shapes_CalcWidthAndHeight
  ' Shapes | calculate total width and height of shapes
  ' param shape[] - shape array
  ' return shWidth, shHeight - total size of shapes
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    If shp["func"] = "tri" Or shp["func"] = "line" Then
      xmin = shp["x1"]
      xmax = shp["x1"]
      ymin = shp["y1"]
      ymax = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If xmax < shp["x2"] Then
        xmax = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If ymax < shp["y2"] Then
        ymax = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If xmax < shp["x3"] Then
          xmax = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        If ymax < shp["y3"] Then
          ymax = shp["y3"]
        EndIf
      EndIf
      shp["width"] = xmax - xmin
      shp["height"] = ymax - ymin
    EndIf
    If i = 1 Then
      shWidth = shp["x"] + shp["width"]
      shHeight = shp["y"] + shp["height"]
    Else
      If shWidth < shp["x"] + shp["width"] Then
        shWidth = shp["x"] + shp["width"]
      EndIf
      If shHeight < shp["y"] + shp["height"] Then
        shHeight = shp["y"] + shp["height"]
      EndIf
    EndIf
    shape[i] = shp
  EndFor
EndSub

Sub Shapes_DumpArray
  order = "1=func;2=x;3=y;4=width;5=height;6=x1;7=y1;8=x2;9=y2;"
  order = order + "10=x3;11=y3;12=txt;13=fn;14=fs;15=fb;16=fi;"
  order = order + "17=angle;18=pw;19=pc;20=bc;"
  nOrder = Array.GetItemCount(order)
  WQ = Text.GetCharacter(34)
  LF = Text.GetCharacter(10)
  GraphicsWindow.BrushColor = "Black"
  GraphicsWindow.FontName = "Consolas"
  GraphicsWindow.FontSize = 14
  tbox = Controls.AddMultiLineTextBox(gw / 2, 10)
  Controls.SetSize(tbox, gw / 2 - 10, gh - 20)
  buf = "  shX = " + shX + " ' x offset" + LF
  buf = buf + "  shY = " + shY + " ' y offset" + LF
  buf = buf + "  shape = " + WQ + WQ + LF
  For i = 1 To Array.GetItemCount(shape)
    buf = buf + "  shape[" + i + "] = " + WQ
    shp = shape[i]
    For j = 1 To nOrder
      If shp[order[j]] <> "" Then
        buf = buf + order[j] + "=" + shp[order[j]] + ";"
      EndIf
    EndFor
    buf = buf + WQ + LF
  EndFor
  Controls.SetTextBoxText(tbox, buf)
  Shapes.SetOpacity(tbox, 50)
EndSub

Sub Shapes_Init_Logo
  ' Shapes | initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 260 ' x offset
  shY = 110 ' y offset
  shape = ""
  shape[1] = "func=tri;x=60;y=0;x1=14;y1=0;x2=0;y2=2;x3=28;y3=2;pw=0;bc=#F4501F;"
  shape[2] = "func=tri;x=72;y=0;x1=14;y1=0;x2=0;y2=2;x3=28;y3=2;pw=0;bc=#7CB70A;"
  shape[3] = "func=rect;x=74;y=0;width=6;height=2;pw=0;bc=#F4501F;"
  shape[4] = "func=rect;x=80;y=0;width=6;height=2;pw=0;bc=#7CB70A;"
  shape[5] = "func=tri;x=46;y=2;x1=14;y1=0;x2=0;y2=6;x3=28;y3=6;pw=0;bc=#F4501F;"
  shape[6] = "func=tri;x=86;y=2;x1=14;y1=0;x2=0;y2=6;x3=28;y3=6;pw=0;bc=#7CB70A;"
  shape[7] = "func=rect;x=60;y=2;width=20;height=6;pw=0;bc=#F4501F;"
  shape[8] = "func=rect;x=80;y=2;width=20;height=6;pw=0;bc=#7CB70A;"
  shape[9] = "func=tri;x=34;y=8;x1=12;y1=0;x2=0;y2=6;x3=24;y3=6;pw=0;bc=#F4501F;"
  shape[10] = "func=tri;x=102;y=8;x1=12;y1=0;x2=0;y2=6;x3=24;y3=6;pw=0;bc=#7CB70A;"
  shape[11] = "func=rect;x=46;y=8;width=34;height=6;pw=0;bc=#F4501F;"
  shape[12] = "func=rect;x=80;y=8;width=34;height=6;pw=0;bc=#7CB70A;"
  shape[13] = "func=tri;x=24;y=14;x1=10;y1=0;x2=0;y2=10;x3=20;y3=10;pw=0;bc=#F4501F;"
  shape[14] = "func=tri;x=116;y=14;x1=10;y1=0;x2=0;y2=10;x3=20;y3=10;pw=0;bc=#7CB70A;"
  shape[15] = "func=rect;x=34;y=14;width=46;height=10;pw=0;bc=#F4501F;"
  shape[16] = "func=rect;x=80;y=14;width=46;height=10;pw=0;bc=#7CB70A;"
  shape[17] = "func=tri;x=14;y=24;x1=10;y1=0;x2=0;y2=10;x3=20;y3=10;pw=0;bc=#F4501F;"
  shape[18] = "func=tri;x=126;y=24;x1=10;y1=0;x2=0;y2=10;x3=20;y3=10;pw=0;bc=#7CB70A;"
  shape[19] = "func=rect;x=24;y=24;width=56;height=10;pw=0;bc=#F4501F;"
  shape[20] = "func=rect;x=80;y=24;width=56;height=10;pw=0;bc=#7CB70A;"
  shape[21] = "func=tri;x=8;y=34;x1=6;y1=0;x2=0;y2=12;x3=12;y3=12;pw=0;bc=#F4501F;"
  shape[22] = "func=tri;x=140;y=34;x1=6;y1=0;x2=0;y2=12;x3=12;y3=12;pw=0;bc=#7CB70A;"
  shape[23] = "func=rect;x=14;y=34;width=66;height=12;pw=0;bc=#F4501F;"
  shape[24] = "func=rect;x=80;y=34;width=66;height=12;pw=0;bc=#7CB70A;"
  shape[25] = "func=tri;x=2;y=46;x1=6;y1=0;x2=0;y2=14;x3=12;y3=14;pw=0;bc=#F4501F;"
  shape[26] = "func=tri;x=146;y=46;x1=6;y1=0;x2=0;y2=14;x3=12;y3=14;pw=0;bc=#7CB70A;"
  shape[27] = "func=rect;x=8;y=46;width=72;height=14;pw=0;bc=#F4501F;"
  shape[28] = "func=rect;x=80;y=46;width=72;height=14;pw=0;bc=#7CB70A;"
  shape[29] = "func=tri;x=0;y=60;x1=2;y1=0;x2=0;y2=14;x3=4;y3=14;pw=0;bc=#F4501F;"
  shape[30] = "func=tri;x=156;y=60;x1=2;y1=0;x2=0;y2=14;x3=4;y3=14;pw=0;bc=#7CB70A;"
  shape[31] = "func=rect;x=2;y=60;width=78;height=14;pw=0;bc=#F4501F;"
  shape[32] = "func=rect;x=80;y=60;width=78;height=14;pw=0;bc=#7CB70A;"
  shape[33] = "func=rect;x=0;y=74;width=80;height=6;pw=0;bc=#F4501F;"
  shape[34] = "func=rect;x=80;y=74;width=80;height=6;pw=0;bc=#7CB70A;"
  shape[35] = "func=rect;x=0;y=80;width=80;height=6;angle=180;pw=0;bc=#03A3ED;"
  shape[36] = "func=rect;x=80;y=80;width=80;height=6;angle=180;pw=0;bc=#FCB901;"
  shape[37] = "func=tri;x=0;y=86;x1=2;y1=0;x2=0;y2=14;x3=4;y3=14;angle=180;pw=0;bc=#03A3ED;"
  shape[38] = "func=tri;x=156;y=86;x1=2;y1=0;x2=0;y2=14;x3=4;y3=14;angle=180;pw=0;bc=#FCB901;"
  shape[39] = "func=rect;x=2;y=86;width=78;height=14;angle=180;pw=0;bc=#03A3ED;"
  shape[40] = "func=rect;x=80;y=86;width=78;height=14;angle=180;pw=0;bc=#FCB901;"
  shape[41] = "func=tri;x=2;y=100;x1=6;y1=0;x2=0;y2=14;x3=12;y3=14;angle=180;pw=0;bc=#03A3ED;"
  shape[42] = "func=tri;x=146;y=100;x1=6;y1=0;x2=0;y2=14;x3=12;y3=14;angle=180;pw=0;bc=#FCB901;"
  shape[43] = "func=rect;x=8;y=100;width=72;height=14;angle=180;pw=0;bc=#03A3ED;"
  shape[44] = "func=rect;x=80;y=100;width=72;height=14;angle=180;pw=0;bc=#FCB901;"
  shape[45] = "func=tri;x=8;y=114;x1=6;y1=0;x2=0;y2=12;x3=12;y3=12;angle=180;pw=0;bc=#03A3ED;"
  shape[46] = "func=tri;x=140;y=114;x1=6;y1=0;x2=0;y2=12;x3=12;y3=12;angle=180;pw=0;bc=#FCB901;"
  shape[47] = "func=rect;x=14;y=114;width=66;height=12;angle=180;pw=0;bc=#03A3ED;"
  shape[48] = "func=rect;x=80;y=114;width=66;height=12;angle=180;pw=0;bc=#FCB901;"
  shape[49] = "func=tri;x=14;y=126;x1=10;y1=0;x2=0;y2=10;x3=20;y3=10;angle=180;pw=0;bc=#03A3ED;"
  shape[50] = "func=tri;x=126;y=126;x1=10;y1=0;x2=0;y2=10;x3=20;y3=10;angle=180;pw=0;bc=#FCB901;"
  shape[51] = "func=rect;x=24;y=126;width=56;height=10;angle=180;pw=0;bc=#03A3ED;"
  shape[52] = "func=rect;x=80;y=126;width=56;height=10;angle=180;pw=0;bc=#FCB901;"
  shape[53] = "func=tri;x=24;y=136;x1=10;y1=0;x2=0;y2=10;x3=20;y3=10;angle=180;pw=0;bc=#03A3ED;"
  shape[54] = "func=tri;x=116;y=136;x1=10;y1=0;x2=0;y2=10;x3=20;y3=10;angle=180;pw=0;bc=#FCB901;"
  shape[55] = "func=rect;x=34;y=136;width=46;height=10;angle=180;pw=0;bc=#03A3ED;"
  shape[56] = "func=rect;x=80;y=136;width=46;height=10;angle=180;pw=0;bc=#FCB901;"
  shape[57] = "func=tri;x=34;y=146;x1=12;y1=0;x2=0;y2=6;x3=24;y3=6;angle=180;pw=0;bc=#03A3ED;"
  shape[58] = "func=tri;x=102;y=146;x1=12;y1=0;x2=0;y2=6;x3=24;y3=6;angle=180;pw=0;bc=#FCB901;"
  shape[59] = "func=rect;x=46;y=146;width=34;height=6;angle=180;pw=0;bc=#03A3ED;"
  shape[60] = "func=rect;x=80;y=146;width=34;height=6;angle=180;pw=0;bc=#FCB901;"
  shape[61] = "func=tri;x=46;y=152;x1=14;y1=0;x2=0;y2=6;x3=28;y3=6;angle=180;pw=0;bc=#03A3ED;"
  shape[62] = "func=tri;x=86;y=152;x1=14;y1=0;x2=0;y2=6;x3=28;y3=6;angle=180;pw=0;bc=#FCB901;"
  shape[63] = "func=rect;x=60;y=152;width=20;height=6;angle=180;pw=0;bc=#03A3ED;"
  shape[64] = "func=rect;x=80;y=152;width=20;height=6;angle=180;pw=0;bc=#FCB901;"
  shape[65] = "func=tri;x=60;y=158;x1=14;y1=0;x2=0;y2=2;x3=28;y3=2;angle=180;pw=0;bc=#03A3ED;"
  shape[66] = "func=tri;x=72;y=158;x1=14;y1=0;x2=0;y2=2;x3=28;y3=2;angle=180;pw=0;bc=#FCB901;"
  shape[67] = "func=rect;x=74;y=158;width=6;height=2;angle=180;pw=0;bc=#03A3ED;"
  shape[68] = "func=rect;x=80;y=158;width=6;height=2;angle=180;pw=0;bc=#FCB901;"
  shape[69] = "func=tri;x=44;y=28;x1=36;y1=0;x2=0;y2=16;x3=72;y3=16;pw=0;bc=White;"
  shape[70] = "func=tri;x=28;y=44;x1=16;y1=0;x2=0;y2=36;x3=32;y3=36;pw=0;bc=White;"
  shape[71] = "func=tri;x=100;y=44;x1=16;y1=0;x2=0;y2=36;x3=32;y3=36;pw=0;bc=White;"
  shape[72] = "func=rect;x=44;y=44;width=72;height=36;pw=0;bc=White;"
  shape[73] = "func=tri;x=28;y=80;x1=16;y1=0;x2=0;y2=36;x3=32;y3=36;angle=180;pw=0;bc=White;"
  shape[74] = "func=tri;x=100;y=80;x1=16;y1=0;x2=0;y2=36;x3=32;y3=36;angle=180;pw=0;bc=White;"
  shape[75] = "func=rect;x=44;y=80;width=72;height=36;angle=180;pw=0;bc=White;"
  shape[76] = "func=tri;x=44;y=116;x1=36;y1=0;x2=0;y2=16;x3=72;y3=16;angle=180;pw=0;bc=White;"
  shape[77] = "func=tri;x=48;y=36;x1=32;y1=0;x2=0;y2=12;x3=64;y3=12;pw=0;bc=DimGray;"
  shape[78] = "func=tri;x=36;y=48;x1=12;y1=0;x2=0;y2=32;x3=24;y3=32;pw=0;bc=DimGray;"
  shape[79] = "func=tri;x=100;y=48;x1=12;y1=0;x2=0;y2=32;x3=24;y3=32;pw=0;bc=DimGray;"
  shape[80] = "func=rect;x=48;y=48;width=64;height=32;pw=0;bc=DimGray;"
  shape[81] = "func=tri;x=36;y=80;x1=12;y1=0;x2=0;y2=32;x3=24;y3=32;angle=180;pw=0;bc=DimGray;"
  shape[82] = "func=tri;x=100;y=80;x1=12;y1=0;x2=0;y2=32;x3=24;y3=32;angle=180;pw=0;bc=DimGray;"
  shape[83] = "func=rect;x=48;y=80;width=64;height=32;angle=180;pw=0;bc=DimGray;"
  shape[84] = "func=tri;x=48;y=112;x1=32;y1=0;x2=0;y2=12;x3=64;y3=12;angle=180;pw=0;bc=DimGray;"
  shape[85] = "func=tri;x=56;y=46;x1=24;y1=0;x2=0;y2=10;x3=48;y3=10;pw=0;bc=White;"
  shape[86] = "func=tri;x=46;y=56;x1=10;y1=0;x2=0;y2=24;x3=20;y3=24;pw=0;bc=White;"
  shape[87] = "func=tri;x=94;y=56;x1=10;y1=0;x2=0;y2=24;x3=20;y3=24;pw=0;bc=White;"
  shape[88] = "func=rect;x=56;y=56;width=48;height=24;pw=0;bc=White;"
  shape[89] = "func=tri;x=46;y=80;x1=10;y1=0;x2=0;y2=24;x3=20;y3=24;angle=180;pw=0;bc=White;"
  shape[90] = "func=tri;x=94;y=80;x1=10;y1=0;x2=0;y2=24;x3=20;y3=24;angle=180;pw=0;bc=White;"
  shape[91] = "func=rect;x=56;y=80;width=48;height=24;angle=180;pw=0;bc=White;"
  shape[92] = "func=tri;x=56;y=104;x1=24;y1=0;x2=0;y2=10;x3=48;y3=10;angle=180;pw=0;bc=White;"
  shape[93] = "func=line;x=0;y=80;x1=0;y1=0;x2=32;y2=0;pw=6.4;pc=White;"
  shape[94] = "func=line;x=23.42;y=23.42;x1=0;y1=0;x2=22.62;y2=22.62;pw=6.4;pc=White;"
  shape[95] = "func=line;x=80;y=0;x1=0;y1=0;x2=0;y2=32;pw=6.4;pc=White;"
  shape[96] = "func=line;x=113.94;y=23.42;x1=22.62;y1=0;x2=0;y2=22.62;pw=6.4;pc=White;"
  shape[97] = "func=line;x=128;y=79.98;x1=32;y1=0;x2=0;y2=0;pw=6.4;pc=White;"
  shape[98] = "func=line;x=113.94;y=113.94;x1=22.62;y1=22.62;x2=0;y2=0;pw=6.4;pc=White;"
  shape[99] = "func=line;x=80;y=128;x1=0;y1=32;x2=0;y2=0;pw=6.4;pc=White;"
  shape[100] = "func=line;x=23.42;y=113.94;x1=0;y1=22.62;x2=22.62;y2=0;pw=6.4;pc=White;"
  shape[101] = "func=line;x=0;y=80;x1=0;y1=0;x2=32;y2=0;pw=6.4;pc=White;"
  shape[102] = "func=line;x=46.4;y=80;x1=0;y1=0;x2=67.2;y2=0;pw=11.2;pc=DimGray;"
  shape[103] = "func=line;x=80;y=46.4;x1=0;y1=0;x2=0;y2=67.2;pw=28.8;pc=DimGray;"
  shape[104] = "func=line;x=80;y=28.8;x1=0;y1=0;x2=0;y2=102.4;pw=6.4;pc=White;"
  shape[105] = "func=line;x=62.4;y=71.2;x1=0;y1=0;x2=17.6;y2=0;pw=6.4;pc=White;"
  shape[106] = "func=line;x=35.2;y=88.8;x1=0;y1=0;x2=17.6;y2=0;pw=6.4;pc=White;"
EndSub

Sub Shapes_Resize
  ' param shape - array of shapes
  ' param scale - to resize
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    If Text.IsSubText("rect|ell|tri|line|text", shp["func"]) Then
      shp["x"] = Math.Floor(shp["x"] * scale * 100) / 100 
      shp["y"] = Math.Floor(shp["y"] * scale * 100) / 100
    EndIf
    If Text.IsSubText("rect|ell", shp["func"]) Then
      shp["width"] = Math.Floor(shp["width"] * scale * 100) / 100 
      shp["height"] = Math.Floor(shp["height"] * scale * 100) / 100
    EndIf
    If Text.IsSubText("tri|line", shp["func"]) Then
      shp["x1"] = Math.Floor(shp["x1"] * scale * 100) / 100 
      shp["y1"] = Math.Floor(shp["y1"] * scale * 100) / 100
      shp["x2"] = Math.Floor(shp["x2"] * scale * 100) / 100 
      shp["y2"] = Math.Floor(shp["y2"] * scale * 100) / 100
    EndIf
    If shp["func"] = "tri" Then
      shp["x3"] = Math.Floor(shp["x3"] * scale * 100) / 100 
      shp["y3"] = Math.Floor(shp["y3"] * scale * 100) / 100
    EndIf
    If 0 < shp["pw"] Then
      shp["pw"] = Math.Floor(shp["pw"] * scale * 100) / 100
    EndIf
    shape[i] = shp
  EndFor
EndSub

Sub Shapes_Normalize
  iMax = Array.GetItemCount(shape)
  For i = 1 To iMax
    shp = shape[i]
    If Text.IsSubText("line|tri", shp["func"]) Then
      xmin = shp["x1"]
      ymin = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        shp["x3"] = shp["x3"] - xmin
        shp["y3"] = shp["y3"] - ymin
      EndIf
      shp["x"] = shp["x"] + xmin
      shp["y"] = shp["y"] + ymin
      shp["x1"] = shp["x1"] - xmin
      shp["y1"] = shp["y1"] - ymin
      shp["x2"] = shp["x2"] - xmin
      shp["y2"] = shp["y2"] - ymin
      shape[i] = shp
    EndIf
  EndFor
  If 0 < iMax Then
    shp = shape[1]
    xmin = shp["x"]
    ymin = shp["y"]
    xmax = shp["x"]
    ymax = shp["y"]
  EndIf
  For i = 2 To iMax
    shp = shape[i]
    If shp["x"] < xmin Then
      xmin = shp["x"]
    EndIf
    If shp["y"] < ymin Then
      ymin = shp["y"]
    EndIf
    If xmax < shp["x"] Then
      xmax = shp["x"]
    EndIf
    If ymax < shp["y"] Then
      ymax = shp["y"]
    EndIf
  EndFor
  shX = xmin
  shY = ymin
  For i = 1 To iMax
    shp = shape[i]
    shp["x"] = shp["x"] - xmin
    shp["y"] = shp["y"] - ymin
    If shp["angle"] = 0 Then
      shp["angle"] = ""
    EndIf
    shape[i] = shp
  EndFor
EndSub
