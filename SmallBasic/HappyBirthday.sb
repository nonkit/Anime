' Happy Birthday Small Basic!!
' Copyright Â© 2014-2019 Nonki Takahashi. The MIT License.
' 2014-10-23 20:26:31 Shapes generated by Shapes 1.7b.
' Last update 2019-10-02
' Program ID SFF730-6

anniv = "11th"
SB_Workaround()
Init()
' initialize shapes
Shapes_Init_Cake()
' add shapes
scale = 1
angle = 0
name = "Cake"
Group_Add()
Shapes_Init_Logo()
name = "Logo"
Group_Add()
' balloon animation
c[1] = "#FF9999"
c[2] = "#FFCC66"
c[3] = "#FFFF66"
c[4] = "#CCFF66"
c[5] = "#66FF66"
c[6] = "#33FFCC"
c[7] = "#66FFFF"
c[8] = "#66CCFF"
c[9] = "#9999FF"
c[10] = "#CC66FF"
c[11] = "#FF66FF"
c[12] = "#FF33CC"
GraphicsWindow.PenWidth = 0
ew = 70
eh = 90
sqr2 = Math.SquareRoot(2)
tw = ew / sqr2
th = eh / sqr2 / 2
For i = 1 To n
  GraphicsWindow.BrushColor = c[i]
  AddBalloon()
  x = Math.GetRandomNumber(gw -  2 * ew) + ew
  y = Math.GetRandomNumber(eh) + eh + gh
  MoveBalloon()
EndFor
GraphicsWindow.FontSize = 24
GraphicsWindow.BrushColor = "White"
x = (gw - 392) / 2
y = 70
caption = Shapes.AddText("Happy " + anniv + " Birthday Small Basic!!")
Shapes.Move(caption, x, y)
GraphicsWindow.PenWidth = 0
t0 = Clock.ElapsedMilliseconds
Timer.Interval = dt * 1000
Timer.Tick = UpdateBalloon
' happy birthday song
For b = 0 To 2
  BirthdaySong()
EndFor

Sub Init
  colors = "0=#FF6666;30=#CCCC33;50=#33CC33;70=#6666FF;100=#CC33CC;"
  gw = GraphicsWindow.Width
  gh = GraphicsWindow.Height
  GraphicsWindow.Title = "The " + anniv + " Anniversary"
  ' fill background
  param = "x=0;y=0;width=" + gw + ";height=" + gh + ";angle=40;"
  param = param + colors
  GW_FillLinearGradientRectangle()
  ' draw Happy Birthday Small Basic!!
  GraphicsWindow.FontName = "Arial"
  GraphicsWindow.FontSize = 500
  GraphicsWindow.BrushColor = "#33000000"
  x = (gw - 558) / 2
  y = -60
  GraphicsWindow.DrawText(x, y, Text.GetSubText(anniv, 1, 2))
  n = 12
  dt = 0.2  ' sec
  g = -3    ' px/sec^2
  v0 = 30   ' px/sec
  j = 1
EndSub

Sub BirthdaySong
  If b <> 0 Then
    Sound.PlayMusic("O4C3C6D2C2F2E1")
    Sound.PlayMusic("C3C6D2C2G2F1")
  EndIf
  Sound.PlayMusic("O4C3C6O5C2O4A2F3F6E2D2")
  Sound.PlayMusic("B-3B-6A2F2G2F1")
EndSub

Sub AddBalloon
  ' param ew - width
  ' param eh = height
  ' param i = index
  e[i] = Shapes.AddEllipse(ew, eh)
  t[i] = Shapes.AddTriangle(0, 0, tw, 0, tw / 2, th)
  v[i] = 0
  a[i] = 0
EndSub

Sub MoveBalloon
  ' param i - index
  ' param x, y - position
  ex[i] = x - ew / 2
  ey[i] = y - eh / 2
  Shapes.Move(e[i], ex[i], ey[i])
  tx[i] = x - tw / 2
  ty[i] = y + th
  Shapes.Move(t[i], tx[i], ty[i])
EndSub

Sub UpdateBalloon
  t1 = Clock.ElapsedMilliseconds
  If j <= n And j * 800 <= (t1 - t0) Then
    j = j + 1
  EndIf
  If j < n Then
    noBalloon = "False"
  Else
    noBalloon = "True"
  EndIf
  For i = 1 To j - 1
    If e[i] <> "" Then
      _v = v[i]
      v[i] = _v + g * dt
      sign = Math.GetRandomNumber(2) * 2 - 3
      x = ex[i] + ew / 2 + sign * 2
      y = ey[i] + eh / 2 + (_v + v[i]) * dt / 2
      If y < -2 * eh Then
        RemoveBalloon()
      Else
        MoveBalloon()
        noBalloon = "False"
      EndIf
    EndIf
  EndFor
  If noBalloon Then
    ' ticker tape animation
    nMin = 1
    nMax = 0
    Timer.Pause()
    Timer.Interval = 1000 / 14
    Timer.Tick = UpdateTickerTape
    Timer.Resume()
  EndIf
EndSub

Sub RemoveBalloon
  ' param i - index
  Shapes.Remove(e[i])
  Shapes.Remove(t[i])
  e[i] = ""
  t[i] = ""
EndSub

Sub AddTickerTape
  nMax = nMax + 1
  _r = Math.GetRandomNumber(128) + 127
  _g = Math.GetRandomNumber(128) + 127
  _b = Math.GetRandomNumber(128) + 127
  GraphicsWindow.BrushColor = GraphicsWindow.GetColorFromRGB(_r, _g, _b)
  tt[nMax] = Shapes.AddRectangle(16, 8)
  x[nMax] = Math.GetRandomNumber(gw - 20) + 10
  y[nMax] = -10
  a[nMax] = Math.GetRandomNumber(360) - 1
  Shapes.Rotate(tt[nMax], a[nMax])
  Shapes.Move(tt[nMax], x[nMax], y[nMax])
EndSub

Sub UpdateTickerTape
  If Math.GetRandomNumber(10) = 1 Then
    AddTickerTape()
  EndIf
  For i = nMin To nMax
    x[i] = x[i] + Math.GetRandomNumber(4) - 2
    y[i] = y[i] + Math.GetRandomNumber(4)
    If y[i] > gh + 60 Then
      Shapes.Remove(tt[i])
      nMin = i + 1
    EndIf
    Shapes.Move(tt[i], x[i], y[i])
    a[i] = a[i] + 45
    If a[i] >= 360 Then
      a[i] = a[i] - 360
    EndIf
    Shapes.Zoom(tt[i], 1, Math.Sin(Math.GetRadians(a[i])))
  EndFor
EndSub

Sub Color_NameToColor
  ' Color | convert color name to color
  ' param c - color name
  ' returns c -"#rrggbb"
  If Text.StartsWith(c, "#") And 6 < Text.GetLength(c) Then
    c = Text.ConvertToUpperCase(c)
  Else
    Stack.PushValue("local", GraphicsWindow.PenColor)
    GraphicsWindow.PenColor = c
    c = GraphicsWindow.PenColor
    GraphicsWindow.PenColor = Stack.PopValue("local")
  EndIf
EndSub

Sub Group_Add
  ' Group | add shapes to a group
  ' param name - group name
  ' param shX, shY, origin of shape array
  ' param shape[] - shape array
  ' param nGroup - number of group
  ' return nGroup - updated number of group
  ' return group - group array
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  nGroup = nGroup + 1
  grp = ""
  grp["name"] = name
  grp["x"] = shX
  grp["y"] = shY
  grp["angle"] = 0
  grp["dir"] = 1
  Shapes_CalcWidthAndHeight()
  grp["width"] = shWidth
  grp["height"] = shHeight
  grp["cx"] = shWidth / 2
  grp["cy"] = shHeight / 2
  s = 1
  grp["scale"] = s
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    GraphicsWindow.PenWidth = shp["pw"] * s
    If shp["pw"] > 0 Then
      GraphicsWindow.PenColor = shp["pc"]
    EndIf
    If Text.IsSubText("rect|ell|tri|text|btn", shp["func"]) Then
      GraphicsWindow.BrushColor = shp["bc"]
    EndIf
    If Text.IsSubText("text|btn", shp["func"]) Then
      If silverlight Then
        fs = Math.Floor(shp["fs"] * 0.9)
      Else
        fs = shp["fs"]
      EndIf
      GraphicsWindow.FontSize = fs * s
      GraphicsWindow.FontName = shp["fn"]
      If shp["fb"] = "False" Then
        GraphicsWindow.FontBold = "False"
      Else
        GraphicsWindow.FontBold = "True"
      EndIf
    EndIf
    If shp["func"] = "rect" Then
      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "ell" Then
      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "tri" Then
      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)
    ElseIf shp["func"] = "line" Then
      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)
    ElseIf shp["func"] = "text" Then
      shp["obj"] = Shapes.AddText(shp["text"])
    EndIf
    x = shp["x"]
    y = shp["y"]
    shp["rx"] = x
    shp["ry"] = y
    If sbd And (shp["func"] = "line") Then
      shp["wx"] = x
      shp["wy"] = y
    ElseIf silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      _alpha = Math.GetRadians(shp["angle"])
      SB_RotateWorkaround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    If shp["func"] = "btn" Then
      shp["obj"] = Controls.AddButton(shp["caption"], shX + x * s, shY + y * s)
    Else
      Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    EndIf
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then
      Shapes.Rotate(shp["obj"], shp["angle"])
    EndIf
    shape[i] = shp
  EndFor
  grp["shape"] = shape
  group[nGroup] = grp
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub

Sub GW_DrawLine
  ' GraphicsWindow | draw line
  ' param r, g, b - red, green blue
  ' param angle
  ' param x1, y1, x2, y2 - edges of line
  GraphicsWindow.PenColor = GraphicsWindow.GetColorFromRGB(r, g, b)
  If 0 <= angle And angle < 45 Then
    GraphicsWindow.DrawLine(x1 + x0, y1 + y0, x2 + x0, y2 + y0)
  ElseIf 45 <= angle And angle < 90 Then
    GraphicsWindow.DrawLine(y1 + x0, x1 + y0, y2 + x0, x2 + y0)
  ElseIf 90 <= angle And angle < 135 Then
    GraphicsWindow.DrawLine(-y1 + x0 + width, x1 + y0, -y2 + x0 + width, x2 + y0)
  ElseIf 135 <= angle And angle < 180 Then
    GraphicsWindow.DrawLine(-x1 + x0 + width, y1 + y0, -x2 + x0 + width, y2 + y0)
  ElseIf 180 <= angle And angle < 225 Then
    GraphicsWindow.DrawLine(-x1 + x0 + width, -y1 + y0 + height, -x2 + x0 + width, -y2 + y0 + height)
  ElseIf 225 <= angle And angle < 270 Then
    GraphicsWindow.DrawLine(-y1 + x0 + width, -x1 + y0 + height, -y2 + x0 + width, -x2 + y0 + height)
  ElseIf 270 <= angle And angle < 315 Then
    GraphicsWindow.DrawLine(y1 + x0, -x1 + y0 + height, y2 + x0, -x2 + y0 + height)
  ElseIf 315 <= angle And angle < 360 Then
    GraphicsWindow.DrawLine(x1 + x0, -y1 + y0 + height, x2 + x0, -y2 + y0 + height)
  EndIf
EndSub

Sub GW_FillLinearGradientRectangle
  ' GraphicsWindow | fill linear gradient rectangle
  ' param["x"], param["y"] - position of the rectangle
  ' param["width"], param["height"] - size of the rectangle
  ' param["angle"] - angle of gradient
  ' param["0"]..param["100"] - 0% to 100% colors
  x0 = param["x"]
  y0 = param["y"]
  width = param["width"]
  height = param["height"]
  angle = param["angle"]
  n = Array.GetItemCount(param)
  index = Array.GetAllIndices(param)
  color = ""
  For i = 1 To n
    If index[i] + 0 = index[i] And 0 <= index[i] And index[i] <= 100 Then
      c = param[index[i]]
      Color_NameToColor()
      color[index[i]] = c
    EndIf
  EndFor
  If color[0] = "" Then
    color[0] = GraphicsWindow.BrushColor
  EndIf
  If color[100] = "" Then
    color[100] = GraphicsWindow.BrushColor
  EndIf
  n = Array.GetItemCount(color)
  index = Array.GetAllIndices(color)
  a45 = Math.Remainder(angle, 45)
  If 0 <= angle And angle < 45 Then
    w45 = width
    h45 = height
  ElseIf 45 <= angle And angle < 90 Then
    w45 = height
    h45 = width
    a45 = 45 - a45
  ElseIf 90 <= angle And angle < 135 Then
    w45 = height
    h45 = width
  ElseIf 135 <= angle And angle < 180 Then
    w45 = width
    h45 = height
    a45 = 45 - a45
  ElseIf 180 <= angle And angle < 225 Then
    w45 = width
    h45 = height
  ElseIf 225 <= angle And angle < 270 Then
    w45 = height
    h45 = width
    a45 = 45 - a45
  ElseIf 270 <= angle And angle < 315 Then
    w45 = height
    h45 = width
  ElseIf 315 <= angle And angle < 360 Then
    w45 = width
    h45 = height
    a45 = 45 - a45
  EndIf
  If a45 = 0 Then
    For x = 0 To w45
      percent = Math.Floor(x * 100 / w45)
      Color_PercentToRGB()
      x1 = x
      y1 = 0
      x2 = x
      y2 = h45
      GW_DrawLine()
    EndFor
  ElseIf 0 < a45 And a45 <= 45 Then
    tan = Math.Tan(Math.GetRadians(a45))
    If h45 <= w45 Then
      dx = Math.Floor(h45 * tan)
      For x = 0 To dx
        percent = Math.Floor(x * 100 / (w45 + dx))
        Color_PercentToRGB()
        x1 = x
        y1 = 0
        x2 = 0
        y2 = Math.Floor(x / tan)
        GW_DrawLine()
      EndFor
      For x = dx To w45
        percent = Math.Floor(x * 100 / (w45 + dx))
        Color_PercentToRGB()
        x1 = x
        y1 = 0
        x2 = x - dx
        y2 = h45
        GW_DrawLine()
      EndFor
      For x = w45 To w45 + dx
        percent = Math.Floor(x * 100 / (w45 + dx))
        Color_PercentToRGB()
        x1 = x - dx
        y1 = h45
        x2 = w45
        y2 = Math.Floor((x - w45) / tan)
        GW_DrawLine()
      EndFor
    Else  ' width < height
      dx = Math.Floor(h45 * tan - w45)
      dy = Math.Floor(w45 / tan)
      For x = 0 To w45
        percent = Math.Floor(x * 100 / (2 * w45 + dx))
        Color_PercentToRGB()
        x1 = x
        y1 = 0
        x2 = 0
        y2 = Math.Floor(x / tan)
        GW_DrawLine()
      EndFor
      For x = 0 To dx
        percent = Math.Floor((x + w45) * 100 / (2 * w45 + dx))
        Color_PercentToRGB()
        x1 = w45
        y1 = Math.Floor(x / tan)
        x2 = 0
        y2 = y1 + dy
        GW_DrawLine()
      EndFor
      dy = h45 - Math.Floor(w45 / tan)
      For x = 0 To w45
        percent = Math.Floor((x + w45 + dx) * 100 / (2 * w45 + dx))
        Color_PercentToRGB()
        x1 = x
        y1 = h45
        x2 = w45
        y2 = dy + Math.Floor(x / tan)
        GW_DrawLine()
      EndFor
    EndIf
  EndIf
EndSub

Sub Group_Move
  ' Group | move a group
  ' param group[i] - group To move
  ' param x, y - position To move
  ' return group[i] - updated group
  Stack.PushValue("local", j)
  grp = group[i]
  s = grp["scale"]
  grp["x"] = x
  grp["y"] = y
  shape = grp["shape"]
  n = Array.GetItemCount(shape)
  For j = 1 To n
    shp = shape[j]
    If sbd And (shp["func"] = "line") Then
      _x = shp["wx"]
      _y = shp["wy"]
    ElseIf silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      _x = shp["wx"]
      _y = shp["wy"]
    Else
      _x = shp["rx"]
      _y = shp["ry"]
    EndIf
    _w2 = shp["width"] / 2
    _h2 = shp["height"] / 2
    Shapes.Move(shp["obj"], grp["x"] + (_x - _w2) * s + _w2, grp["y"]  + (_y - _h2) * s + _h2)
  EndFor
  group[i] = grp
  j = Stack.PopValue("local")
EndSub

Sub SB_RotateWorkaround
  ' Small Basic | Rotate workaround for Silverlight
  ' param x, y - original coordinate
  ' param alpha - angle [radian]
  ' returns x, y - workaround coordinate
  If shape[i]["func"] = "tri" Then
    x1 = -Math.Floor(shape[i]["x3"] / 2)
    y1 = -Math.Floor(shape[i]["y3"] / 2)
  ElseIf shape[i]["func"] = "line" Then
    x1 = -Math.Floor(Math.Abs(shape[i]["x1"] - shape[i]["x2"]) / 2)
    y1 = -Math.Floor(Math.Abs(shape[i]["y1"] - shape[i]["y2"]) / 2)
  EndIf
  ox = x - x1
  oy = y - y1
  x = x1 * Math.Cos(_alpha) - y1 * Math.Sin(_alpha) + ox
  y = x1 * Math.Sin(_alpha) + y1 * Math.Cos(_alpha) + oy
EndSub

Sub SB_Workaround
  ' Small Basic | workaround for Silverlight / SBD
  ' return silverlight - "True" if in remote
  ' return sbd - "True" if Small Basic Desktop
  color = GraphicsWindow.GetPixel(0, 0)
  sbd = "False"
  If Text.GetLength(color) > 7 Then
    silverlight = "True"
    msWait = 300
  Else
    silverlight = "False"
    _gw = GraphicsWindow.Width
    _gh = GraphicsWindow.Height
    If (_gw = 624) And (_gh = 441) Then
      sbd = "True"
    EndIf
  EndIf
EndSub

Sub Shapes_Init_Cake
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 210 ' x offset
  shY = 140 ' y offset
  shape = ""
  shape[1] = "func=ell;x=0;y=180;width=200;height=50;bc=#D6D6D6;pw=0;"
  shape[2] = "func=rect;x=0;y=155;width=200;height=51;bc=#D6D6D6;pw=0;"
  shape[3] = "func=ell;x=0;y=128;width=200;height=50;bc=#FFFFFF;pw=0;"
  shape[4] = "func=ell;x=25;y=139;width=154;height=28;bc=#D6D6D6;pw=0;"
  shape[5] = "func=rect;x=25;y=106;width=154;height=48;bc=#D6D6D6;pw=0;"
  shape[6] = "func=ell;x=25;y=94;width=154;height=28;bc=#FFFFFF;pw=0;"
  shape[7] = "func=ell;x=49;y=101;width=105;height=14;bc=#D6D6D6;pw=0;"
  shape[8] = "func=rect;x=49;y=63;width=105;height=45;bc=#D6D6D6;pw=0;"
  shape[9] = "func=ell;x=49;y=57;width=105;height=14;bc=#FFFFFF;pw=0;"
  shape[10] = "func=ell;x=94;y=61;width=14;height=5;bc=#ED933A;pw=0;"
  shape[11] = "func=rect;x=96;y=8;width=10;height=55;bc=#ED933A;pw=0;"
  shape[12] = "func=tri;x=96;y=0;x1=5;y1=0;x2=0;y2=10;x3=10;y3=10;bc=#ED933A;pw=0;"
  shape[13] = "func=tri;x=71;y=2;x1=5;y1=0;x2=0;y2=10;x3=10;y3=10;bc=#8BED3A;pw=0;"
  shape[14] = "func=tri;x=121;y=1;x1=5;y1=0;x2=0;y2=10;x3=10;y3=10;bc=#3AB7ED;pw=0;"
  shape[15] = "func=rect;x=121;y=8;width=10;height=55;bc=#3AB7ED;pw=0;"
  shape[16] = "func=rect;x=71;y=10;width=10;height=55;bc=#8BED3A;pw=0;"
  shape[17] = "func=ell;x=119;y=61;width=14;height=5;bc=#3AB7ED;pw=0;"
  shape[18] = "func=ell;x=69;y=61;width=14;height=5;bc=#8BED3A;pw=0;"
  shape[19] = "func=ell;x=35;y=99;width=13;height=14;bc=#ED3A3A;pw=0;"
  shape[20] = "func=ell;x=53;y=103;width=13;height=14;bc=#ED3A3A;pw=0;"
  shape[21] = "func=ell;x=71;y=105;width=13;height=14;bc=#ED3A3A;pw=0;"
  shape[22] = "func=ell;x=90;y=106;width=13;height=14;bc=#ED3A3A;pw=0;"
  shape[23] = "func=ell;x=109;y=106;width=13;height=14;bc=#ED3A3A;pw=0;"
  shape[24] = "func=ell;x=130;y=104;width=13;height=14;bc=#ED3A3A;pw=0;"
  shape[25] = "func=ell;x=152;y=99;width=13;height=14;bc=#ED3A3A;pw=0;"
  shape[26] = "func=ell;x=11;y=141;width=13;height=14;bc=#ED3A3A;pw=0;"
  shape[27] = "func=ell;x=24;y=149;width=13;height=14;bc=#ED3A3A;pw=0;"
  shape[28] = "func=ell;x=42;y=154;width=13;height=14;bc=#ED3A3A;pw=0;"
  shape[29] = "func=ell;x=65;y=158;width=13;height=14;bc=#ED3A3A;pw=0;"
  shape[30] = "func=ell;x=87;y=160;width=13;height=14;bc=#ED3A3A;pw=0;"
  shape[31] = "func=ell;x=108;y=160;width=13;height=14;bc=#ED3A3A;pw=0;"
  shape[32] = "func=ell;x=131;y=159;width=13;height=14;bc=#ED3A3A;pw=0;"
  shape[33] = "func=ell;x=149;y=155;width=13;height=14;bc=#ED3A3A;pw=0;"
  shape[34] = "func=ell;x=167;y=150;width=13;height=14;bc=#ED3A3A;pw=0;"
  shape[35] = "func=ell;x=180;y=140;width=13;height=14;bc=#ED3A3A;pw=0;"
EndSub

Sub Shapes_Init_Logo
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 12  ' x offset
  shY = 40  ' y offset
  shape = ""
  shape[1] = "pw=0;bc=#F4501F;func=tri;x1=7;y1=0;x2=0;y2=1;x3=14;y3=1;x=289;y=174;"
  shape[2] = "pw=0;bc=#7CB70A;func=tri;x1=7;y1=0;x2=0;y2=1;x3=14;y3=1;x=295;y=174;"
  shape[3] = "pw=0;bc=#F4501F;func=rect;width=3;height=1;x=296;y=174;"
  shape[4] = "pw=0;bc=#7CB70A;func=rect;width=3;height=1;x=299;y=174;"
  shape[5] = "pw=0;bc=#F4501F;func=tri;x1=7;y1=0;x2=0;y2=3;x3=14;y3=3;x=282;y=175;"
  shape[6] = "pw=0;bc=#7CB70A;func=tri;x1=7;y1=0;x2=0;y2=3;x3=14;y3=3;x=302;y=175;"
  shape[7] = "pw=0;bc=#F4501F;func=rect;width=10;height=3;x=289;y=175;"
  shape[8] = "pw=0;bc=#7CB70A;func=rect;width=10;height=3;x=299;y=175;"
  shape[9] = "pw=0;bc=#F4501F;func=tri;x1=6;y1=0;x2=0;y2=3;x3=12;y3=3;x=276;y=178;"
  shape[10] = "pw=0;bc=#7CB70A;func=tri;x1=6;y1=0;x2=0;y2=3;x3=12;y3=3;x=310;y=178;"
  shape[11] = "pw=0;bc=#F4501F;func=rect;width=17;height=3;x=282;y=178;"
  shape[12] = "pw=0;bc=#7CB70A;func=rect;width=17;height=3;x=299;y=178;"
  shape[13] = "pw=0;bc=#F4501F;func=tri;x1=5;y1=0;x2=0;y2=5;x3=10;y3=5;x=271;y=181;"
  shape[14] = "pw=0;bc=#7CB70A;func=tri;x1=5;y1=0;x2=0;y2=5;x3=10;y3=5;x=317;y=181;"
  shape[15] = "pw=0;bc=#F4501F;func=rect;width=23;height=5;x=276;y=181;"
  shape[16] = "pw=0;bc=#7CB70A;func=rect;width=23;height=5;x=299;y=181;"
  shape[17] = "pw=0;bc=#F4501F;func=tri;x1=5;y1=0;x2=0;y2=5;x3=10;y3=5;x=266;y=186;"
  shape[18] = "pw=0;bc=#7CB70A;func=tri;x1=5;y1=0;x2=0;y2=5;x3=10;y3=5;x=322;y=186;"
  shape[19] = "pw=0;bc=#F4501F;func=rect;width=28;height=5;x=271;y=186;"
  shape[20] = "pw=0;bc=#7CB70A;func=rect;width=28;height=5;x=299;y=186;"
  shape[21] = "pw=0;bc=#F4501F;func=tri;x1=3;y1=0;x2=0;y2=6;x3=6;y3=6;x=263;y=191;"
  shape[22] = "pw=0;bc=#7CB70A;func=tri;x1=3;y1=0;x2=0;y2=6;x3=6;y3=6;x=329;y=191;"
  shape[23] = "pw=0;bc=#F4501F;func=rect;width=33;height=6;x=266;y=191;"
  shape[24] = "pw=0;bc=#7CB70A;func=rect;width=33;height=6;x=299;y=191;"
  shape[25] = "pw=0;bc=#F4501F;func=tri;x1=3;y1=0;x2=0;y2=7;x3=6;y3=7;x=260;y=197;"
  shape[26] = "pw=0;bc=#7CB70A;func=tri;x1=3;y1=0;x2=0;y2=7;x3=6;y3=7;x=332;y=197;"
  shape[27] = "pw=0;bc=#F4501F;func=rect;width=36;height=7;x=263;y=197;"
  shape[28] = "pw=0;bc=#7CB70A;func=rect;width=36;height=7;x=299;y=197;"
  shape[29] = "pw=0;bc=#F4501F;func=tri;x1=1;y1=0;x2=0;y2=7;x3=2;y3=7;x=259;y=204;"
  shape[30] = "pw=0;bc=#7CB70A;func=tri;x1=1;y1=0;x2=0;y2=7;x3=2;y3=7;x=337;y=204;"
  shape[31] = "pw=0;bc=#F4501F;func=rect;width=39;height=7;x=260;y=204;"
  shape[32] = "pw=0;bc=#7CB70A;func=rect;width=39;height=7;x=299;y=204;"
  shape[33] = "pw=0;bc=#F4501F;func=rect;width=40;height=3;x=259;y=211;"
  shape[34] = "pw=0;bc=#7CB70A;func=rect;width=40;height=3;x=299;y=211;"
  shape[35] = "pw=0;bc=#03A3ED;func=rect;width=40;height=3;x=259;y=214;angle=180;"
  shape[36] = "pw=0;bc=#FCB901;func=rect;width=40;height=3;x=299;y=214;angle=180;"
  shape[37] = "pw=0;bc=#03A3ED;func=tri;x1=1;y1=0;x2=0;y2=7;x3=2;y3=7;x=259;y=217;angle=180;"
  shape[38] = "pw=0;bc=#FCB901;func=tri;x1=1;y1=0;x2=0;y2=7;x3=2;y3=7;x=337;y=217;angle=180;"
  shape[39] = "pw=0;bc=#03A3ED;func=rect;width=39;height=7;x=260;y=217;angle=180;"
  shape[40] = "pw=0;bc=#FCB901;func=rect;width=39;height=7;x=299;y=217;angle=180;"
  shape[41] = "pw=0;bc=#03A3ED;func=tri;x1=3;y1=0;x2=0;y2=7;x3=6;y3=7;x=260;y=224;angle=180;"
  shape[42] = "pw=0;bc=#FCB901;func=tri;x1=3;y1=0;x2=0;y2=7;x3=6;y3=7;x=332;y=224;angle=180;"
  shape[43] = "pw=0;bc=#03A3ED;func=rect;width=36;height=7;x=263;y=224;angle=180;"
  shape[44] = "pw=0;bc=#FCB901;func=rect;width=36;height=7;x=299;y=224;angle=180;"
  shape[45] = "pw=0;bc=#03A3ED;func=tri;x1=3;y1=0;x2=0;y2=6;x3=6;y3=6;x=263;y=231;angle=180;"
  shape[46] = "pw=0;bc=#FCB901;func=tri;x1=3;y1=0;x2=0;y2=6;x3=6;y3=6;x=329;y=231;angle=180;"
  shape[47] = "pw=0;bc=#03A3ED;func=rect;width=33;height=6;x=266;y=231;angle=180;"
  shape[48] = "pw=0;bc=#FCB901;func=rect;width=33;height=6;x=299;y=231;angle=180;"
  shape[49] = "pw=0;bc=#03A3ED;func=tri;x1=5;y1=0;x2=0;y2=5;x3=10;y3=5;x=266;y=237;angle=180;"
  shape[50] = "pw=0;bc=#FCB901;func=tri;x1=5;y1=0;x2=0;y2=5;x3=10;y3=5;x=322;y=237;angle=180;"
  shape[51] = "pw=0;bc=#03A3ED;func=rect;width=28;height=5;x=271;y=237;angle=180;"
  shape[52] = "pw=0;bc=#FCB901;func=rect;width=28;height=5;x=299;y=237;angle=180;"
  shape[53] = "pw=0;bc=#03A3ED;func=tri;x1=5;y1=0;x2=0;y2=5;x3=10;y3=5;x=271;y=242;angle=180;"
  shape[54] = "pw=0;bc=#FCB901;func=tri;x1=5;y1=0;x2=0;y2=5;x3=10;y3=5;x=317;y=242;angle=180;"
  shape[55] = "pw=0;bc=#03A3ED;func=rect;width=23;height=5;x=276;y=242;angle=180;"
  shape[56] = "pw=0;bc=#FCB901;func=rect;width=23;height=5;x=299;y=242;angle=180;"
  shape[57] = "pw=0;bc=#03A3ED;func=tri;x1=6;y1=0;x2=0;y2=3;x3=12;y3=3;x=276;y=247;angle=180;"
  shape[58] = "pw=0;bc=#FCB901;func=tri;x1=6;y1=0;x2=0;y2=3;x3=12;y3=3;x=310;y=247;angle=180;"
  shape[59] = "pw=0;bc=#03A3ED;func=rect;width=17;height=3;x=282;y=247;angle=180;"
  shape[60] = "pw=0;bc=#FCB901;func=rect;width=17;height=3;x=299;y=247;angle=180;"
  shape[61] = "pw=0;bc=#03A3ED;func=tri;x1=7;y1=0;x2=0;y2=3;x3=14;y3=3;x=282;y=250;angle=180;"
  shape[62] = "pw=0;bc=#FCB901;func=tri;x1=7;y1=0;x2=0;y2=3;x3=14;y3=3;x=302;y=250;angle=180;"
  shape[63] = "pw=0;bc=#03A3ED;func=rect;width=10;height=3;x=289;y=250;angle=180;"
  shape[64] = "pw=0;bc=#FCB901;func=rect;width=10;height=3;x=299;y=250;angle=180;"
  shape[65] = "pw=0;bc=#03A3ED;func=tri;x1=7;y1=0;x2=0;y2=1;x3=14;y3=1;x=289;y=253;angle=180;"
  shape[66] = "pw=0;bc=#FCB901;func=tri;x1=7;y1=0;x2=0;y2=1;x3=14;y3=1;x=295;y=253;angle=180;"
  shape[67] = "pw=0;bc=#03A3ED;func=rect;width=3;height=1;x=296;y=253;angle=180;"
  shape[68] = "pw=0;bc=#FCB901;func=rect;width=3;height=1;x=299;y=253;angle=180;"
  shape[69] = "pw=0;bc=White;func=tri;x1=18;y1=0;x2=0;y2=8;x3=36;y3=8;x=281;y=188;"
  shape[70] = "pw=0;bc=White;func=tri;x1=8;y1=0;x2=0;y2=18;x3=16;y3=18;x=273;y=196;"
  shape[71] = "pw=0;bc=White;func=tri;x1=8;y1=0;x2=0;y2=18;x3=16;y3=18;x=309;y=196;"
  shape[72] = "pw=0;bc=White;func=rect;width=36;height=18;x=281;y=196;"
  shape[73] = "pw=0;bc=White;func=tri;x1=8;y1=0;x2=0;y2=18;x3=16;y3=18;x=273;y=214;angle=180;"
  shape[74] = "pw=0;bc=White;func=tri;x1=8;y1=0;x2=0;y2=18;x3=16;y3=18;x=309;y=214;angle=180;"
  shape[75] = "pw=0;bc=White;func=rect;width=36;height=18;x=281;y=214;angle=180;"
  shape[76] = "pw=0;bc=White;func=tri;x1=18;y1=0;x2=0;y2=8;x3=36;y3=8;x=281;y=232;angle=180;"
  shape[77] = "pw=0;bc=DimGray;func=tri;x1=16;y1=0;x2=0;y2=6;x3=32;y3=6;x=283;y=192;"
  shape[78] = "pw=0;bc=DimGray;func=tri;x1=6;y1=0;x2=0;y2=16;x3=12;y3=16;x=277;y=198;"
  shape[79] = "pw=0;bc=DimGray;func=tri;x1=6;y1=0;x2=0;y2=16;x3=12;y3=16;x=309;y=198;"
  shape[80] = "pw=0;bc=DimGray;func=rect;width=32;height=16;x=283;y=198;"
  shape[81] = "pw=0;bc=DimGray;func=tri;x1=6;y1=0;x2=0;y2=16;x3=12;y3=16;x=277;y=214;angle=180;"
  shape[82] = "pw=0;bc=DimGray;func=tri;x1=6;y1=0;x2=0;y2=16;x3=12;y3=16;x=309;y=214;angle=180;"
  shape[83] = "pw=0;bc=DimGray;func=rect;width=32;height=16;x=283;y=214;angle=180;"
  shape[84] = "pw=0;bc=DimGray;func=tri;x1=16;y1=0;x2=0;y2=6;x3=32;y3=6;x=283;y=230;angle=180;"
  shape[85] = "pw=0;bc=White;func=tri;x1=12;y1=0;x2=0;y2=5;x3=24;y3=5;x=287;y=197;"
  shape[86] = "pw=0;bc=White;func=tri;x1=5;y1=0;x2=0;y2=12;x3=10;y3=12;x=282;y=202;"
  shape[87] = "pw=0;bc=White;func=tri;x1=5;y1=0;x2=0;y2=12;x3=10;y3=12;x=306;y=202;"
  shape[88] = "pw=0;bc=White;func=rect;width=24;height=12;x=287;y=202;"
  shape[89] = "pw=0;bc=White;func=tri;x1=5;y1=0;x2=0;y2=12;x3=10;y3=12;x=282;y=214;angle=180;"
  shape[90] = "pw=0;bc=White;func=tri;x1=5;y1=0;x2=0;y2=12;x3=10;y3=12;x=306;y=214;angle=180;"
  shape[91] = "pw=0;bc=White;func=rect;width=24;height=12;x=287;y=214;angle=180;"
  shape[92] = "pw=0;bc=White;func=tri;x1=12;y1=0;x2=0;y2=5;x3=24;y3=5;x=287;y=226;angle=180;"
  shape[93] = "pw=3.2;pc=White;func=line;x1=259;y1=214;x2=275;y2=214;x=0;y=0;"
  shape[94] = "pw=3.2;pc=White;func=line;x1=270.71;y1=185.71;x2=282.02;y2=197.02;x=0;y=0;"
  shape[95] = "pw=3.2;pc=White;func=line;x1=299;y1=174;x2=299;y2=190;x=0;y=0;"
  shape[96] = "pw=3.2;pc=White;func=line;x1=327.28;y1=185.71;x2=315.97;y2=197.02;x=0;y=0;"
  shape[97] = "pw=3.2;pc=White;func=line;x1=339;y1=213.99;x2=323;y2=213.99;x=0;y=0;"
  shape[98] = "pw=3.2;pc=White;func=line;x1=327.28;y1=242.28;x2=315.97;y2=230.97;x=0;y=0;"
  shape[99] = "pw=3.2;pc=White;func=line;x1=299;y1=254;x2=299;y2=238;x=0;y=0;"
  shape[100] = "pw=3.2;pc=White;func=line;x1=270.71;y1=242.28;x2=282.02;y2=230.97;x=0;y=0;"
  shape[101] = "pw=3.2;pc=White;func=line;x1=259;y1=214;x2=275;y2=214;x=0;y=0;"
  shape[102] = "pw=5.6;pc=DimGray;func=line;x1=282.2;y1=214;x2=315.8;y2=214;x=0;y=0;"
  shape[103] = "pw=14.4;pc=DimGray;func=line;x1=299;y1=197.2;x2=299;y2=230.8;x=0;y=0;"
  shape[104] = "pw=3.2;pc=White;func=line;x1=299;y1=188.4;x2=299;y2=239.6;x=0;y=0;"
  shape[105] = "pw=3.2;pc=White;func=line;x1=290.2;y1=209.6;x2=299;y2=209.6;x=0;y=0;"
  shape[106] = "pw=3.2;pc=White;func=line;x1=276.6;y1=218.4;x2=285.4;y2=218.4;x=0;y=0;"
EndSub

Sub Math_CartesianToPolar
  ' Math | convert cartesian coodinate to polar coordinate
  ' param x, y - cartesian coordinate
  ' return r, a - polar coordinate
  r = Math.SquareRoot(x * x + y * y)
  If x = 0 And y > 0 Then
    a = 90 ' [degree]
  ElseIf x = 0 And y < 0 Then
    a = -90
  Else
    a = Math.ArcTan(y / x) * 180 / Math.Pi
  EndIf
  If x < 0 Then
    a = a + 180
  ElseIf x > 0 And y < 0 Then
    a = a + 360
  EndIf
EndSub

Sub Shapes_CalcRotatePos
  ' Shapes | Calculate position for rotated shape
  ' param["x"], param["y"] - position of a shape
  ' param["width"], param["height"] - size of a shape
  ' param ["cx"], param["cy"] - center of rotation
  ' param ["angle"] - rotate angle
  ' return x, y - rotated position of a shape
  _cx = param["x"] + param["width"] / 2
  _cy = param["y"] + param["height"] / 2
  x = _cx - param["cx"]
  y = _cy - param["cy"]
  Math_CartesianToPolar()
  a = a + param["angle"]
  x = r * Math.Cos(a * Math.Pi / 180)
  y = r * Math.Sin(a * Math.Pi / 180)
  _cx = x + param["cx"]
  _cy = y + param["cy"]
  x = _cx - param["width"] / 2
  y = _cy - param["height"] / 2
EndSub

Sub Shapes_CalcWidthAndHeight
  ' Shapes | calculate total width and height of shapes
  ' param shape[] - shape array
  ' return shWidth, shHeight - total size of shapes
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    If shp["func"] = "tri" Or shp["func"] = "line" Then
      xmin = shp["x1"]
      xmax = shp["x1"]
      ymin = shp["y1"]
      ymax = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If xmax < shp["x2"] Then
        xmax = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If ymax < shp["y2"] Then
        ymax = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If xmax < shp["x3"] Then
          xmax = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        If ymax < shp["y3"] Then
          ymax = shp["y3"]
        EndIf
      EndIf
      shp["width"] = xmax - xmin
      shp["height"] = ymax - ymin
    EndIf
    If i = 1 Then
      shWidth = shp["x"] + shp["width"]
      shHeight = shp["y"] + shp["height"]
    Else
      If shWidth < shp["x"] + shp["width"] Then
        shWidth = shp["x"] + shp["width"]
      EndIf
      If shHeight < shp["y"] + shp["height"] Then
        shHeight = shp["y"] + shp["height"]
      EndIf
    EndIf
    shape[i] = shp
  EndFor
EndSub

Sub Color_PercentToRGB
  ' Color | Convert Percent to RGB
  ' param percent - percent
  ' param color[] - color table indexed percent
  ' param n - item count of color[]
  ' param index[] - all indices of color[]
  For i = 1 To n
    p1 = index[i]
    If index[i] = percent Then
      p2 = index[i]
      i = n + 1 ' break
    ElseIf index[i] < percent And percent < index[i + 1] Then
      p2 = index[i + 1]
      i = n + 1 ' break
    EndIf
  EndFor
  c = color[p1]
  Color_ColorToRGB()
  If p1 <> p2 Then
    r1 = r
    g1 = g
    b1 = b
    c = color[p2]
    Color_ColorToRGB()
    r2 = r
    g2 = g
    b2 = b
    r = Math.Floor(r1 + (r2 - r1) * (percent - p1) / (p2 - p1))
    g = Math.Floor(g1 + (g2 - g1) * (percent - p1) / (p2 - p1))
    b = Math.Floor(b1 + (b2 - b1) * (percent - p1) / (p2 - p1))
  EndIf
EndSub

Sub Color_ColorToRGB
  ' Color | Convert Color to RGB
  ' param c - color
  ' returns r, g, b - red, green and blue values
  If Text.StartsWith(c, "#") Then
    c = Text.ConvertToUpperCase(c)
  Else
    c = Text.ConvertToLowerCase(c)
    c = colors[c]
  EndIf
  sHex = Text.GetSubText(c, 2, 2)
  Math_Hex2Dec()
  r = iDec
  sHex = Text.GetSubText(c, 4, 2)
  Math_Hex2Dec()
  g = iDec
  sHex = Text.GetSubText(c, 6, 2)
  Math_Hex2Dec()
  b = iDec
EndSub

Sub Math_Hex2Dec
  ' Math | Convert hexadecimal to decimal
  ' param sHex
  ' returns iDec
  iDec = 0
  iLen = Text.GetLength(sHex)
  For iPtr = 1 To iLen
    iDec = iDec * 16 + Text.GetIndexOf("0123456789ABCDEF", Text.GetSubText(sHex, iPtr, 1)) - 1
  EndFor
EndSub
