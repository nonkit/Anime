' Yokohama Human Relation Facilitation
' Copyright © 2018 Nonki Takahashi.  The MIT License.
' 2018-12-15 15:57:18 Shapes generated by Shapes 2.3b.

GraphicsWindow.Title = "横浜ファシリテーション研究会"
SB_Workaround()
Init()
dt = 0.1
While "True"
  ' Update seagulls and smoke
  For j = 1 To 3
    x = gx[j]
    y = gy[j]
    gt[j] = Math.Remainder(gt[j] + dt, 1)
    t = gt[j]
    Seagull()
    st[j] = Math.Remainder(st[j] + dt, 3)
    t = st[j]
    Smoke()
  EndFor
  Program.Delay(dt * 1000)
EndWhile

Sub Init
  gw = 800
  gh = 566
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
  ' Load images
  url = "http://www.nonkit.com/hrf/image/sky.png"
  sky = ImageList.LoadImage(url)
  url = "http://www.nonkit.com/hrf/image/mountain.png"
  mountain = ImageList.LoadImage(url)
  ' Sky
  GraphicsWindow.DrawImage(sky, 0, 0)
  ' Sea
  GraphicsWindow.PenWidth = 0
  x = 0
  y = 420
  width = gw
  height = gh - y
  i = i + 1
  GraphicsWindow.BrushColor = "#4D6DF3"
  _shp[i] = Shapes.AddRectangle(width, height)
  Shapes.Move(_shp[i], x, y)
  ' Smoke
  sx = 460
  sy = 380
  ss = 24   ' smoke size
  t = 1
  For j = 1 To 3
    t = j
    st[j] = t
    Smoke()
  EndFor
  ' Ship
  scale = 0.5
  angle = 0
  Shapes_Init()
  name = "Ship"
  Group_Add()
  _i = i
  i = nGroup
  grp = group[i]
  x = 450 + (s - 1) * grp["width"]
  y = 420 + (s - 1) * grp["height"]
  Group_Move()
  i = _i
  ' Wave
  x = 0
  y = 460
  width = gw
  height = gh - y
  i = i + 1
  GraphicsWindow.BrushColor = "#4D6DF3"
  _shp[i] = Shapes.AddRectangle(width, height)
  Shapes.Move(_shp[i], x, y)
  ' Port
  y = 478
  height = gh - y
  i = i + 1
  GraphicsWindow.BrushColor = "#B4B4B4"
  _shp[i] = Shapes.AddRectangle(width, height)
  Shapes.Move(_shp[i], x, y)
  ' Mountain
  i = i + 1
  _shp[i] = Shapes.AddImage(mountain)
  ' Clouod
  GraphicsWindow.BrushColor = "White"
  x = gw - 150
  y = 40
  size = "1=32;2=40;3=35;"
  dx = "1=28;2=35;"
  dy = "1=-6;2=0;"
  For j = 1 To 3
    i = i + 1
    _shp[i] = Shapes.AddEllipse(size[j], size[j])
    Shapes.Move(_shp[i], x, y)
    x = x + dx[j]
    y = y + dy[j]
  EndFor
  ' Seagulls
  gx = "1=120;2=190;3=220;"
  gy = "1=370;2=340;3=380;"
  t = 0
  For j = 1 To 3
    x = gx[j]
    y = gy[j]
    gt[j] = t
    Seagull()
    t = t + 0.25
  EndFor
  ' Caption
  fs = 16
  GraphicsWindow.FontSize = fs
  GraphicsWindow.FontName = "Meiryo"
  GraphicsWindow.FontBold = "False"
  caption[1] = "横浜ファシリテーション研究会は"
  caption[2] = "自分自身やグループの成長について学びあう"
  caption[3] = "参加型の体験学習会です。"
  y = 478
  For j = 1 To 3
    i = i + 1
    _shp[i] = Shapes.AddText(caption[j])
    x = gw - 16 - Text.GetLength(caption[j]) * fs
    Shapes.Move(_shp[i], x, y)
    y = y + fs * 1.6
  EndFor
EndSub

Sub Seagull
  If sg[j] = "" Then
    first = "True"
  Else
    first = "False"
  EndIf
  If first Then
    i = i + 1
    sg[j] = i
    GraphicsWindow.PenWidth = 0
    GraphicsWindow.BrushColor = "White"
    _shp[i] = Shapes.AddEllipse(4, 4)
  Else
    i = sg[j]
  EndIf
  Shapes.Move(_shp[i], x - 2, y - 2)
  r = 12
  a1 = 30 - 30 * Math.Cos(t * 2 * Math.Pi)
  _a1 = Math.GetRadians(a1)
  x1 = x - r * Math.Cos(_a1)
  y1 = y + r * Math.Sin(_a1)
  x2 = x + r * Math.Cos(_a1)
  y2 = y + r * Math.Sin(_a1)
  _x = x
  _y = y
  For a = a1 + 15 To a1 + 90 Step 15
    _a = Math.GetRadians(a)
    x = x1 + r * Math.Cos(_a)
    y = y1 - r * Math.Sin(_a)
    i = i + 1
    If first Then
      _shp[i] = Shapes.AddEllipse(6, 6)
    EndIf
    Shapes.Move(_shp[i], x - 3, y - 3)
  EndFor
  For a = a1 + 15 To a1 + 90 Step 15
    _a = Math.GetRadians(a)
    x = x2 - r * Math.Cos(_a)
    y = y2 - r * Math.Sin(_a)
    i = i + 1
    If first Then
      _shp[i] = Shapes.AddEllipse(6, 6)
    EndIf
    Shapes.Move(_shp[i], x - 3, y - 3)
  EndFor
  x = _x
  y = _y
EndSub

Sub Smoke
  If sm[j] = "" Then
    first = "True"
  Else
    first = "False"
  EndIf
  If first Then
    i = i + 1
    sm[j] = i
    GraphicsWindow.PenWidth = 0
    GraphicsWindow.BrushColor = "White"
    _shp[i] = Shapes.AddEllipse(ss, ss * 0.8)
  Else
    i = sm[j]
  EndIf
  Shapes.Zoom(_shp[i], 0.3 + 0.7 * (t / 3), 0.3 + 0.7 * (t / 3))
  x = sx + 100 - 100 * Math.Cos((t / 3) * Math.Pi / 2)
  y = sy - 50 * Math.Sin((t / 3) * Math.Pi / 2)
  Shapes.Move(_shp[i], x - ss / 2, y - (ss * 0.8) / 2)
  Shapes.SetOpacity(_shp[i], 100 * (1 - t / 3))
EndSub

Sub Group_Add
  ' Group | add shapes To a group
  ' param name - group name
  ' param shX, shY, origin of shape array
  ' param scale - scale of group
  ' param shape[] - shape array
  ' param nGroup - number of group
  ' return nGroup - updated number of group
  ' return group - group array
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  nGroup = nGroup + 1
  grp = ""
  grp["name"] = name
  grp["x"] = shX
  grp["y"] = shY
  grp["angle"] = 0
  grp["dir"] = 1
  Shapes_CalcWidthAndHeight()
  grp["width"] = shWidth
  grp["height"] = shHeight
  s = scale
  grp["scale"] = s
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    GraphicsWindow.PenWidth = shp["pw"] * s
    If shp["pw"] > 0 Then
      GraphicsWindow.PenColor = shp["pc"]
    EndIf
    If Text.IsSubText("rect|ell|tri|text|btn", shp["func"]) Then
      GraphicsWindow.BrushColor = shp["bc"]
    EndIf
    If Text.IsSubText("text|btn", shp["func"]) Then
      If silverlight Then
        fs = Math.Floor(shp["fs"] * 0.9)
      Else
        fs = shp["fs"]
      EndIf
      GraphicsWindow.FontSize = fs * s
      GraphicsWindow.FontName = shp["fn"]
      If shp["fb"] = "False" Then
        GraphicsWindow.FontBold = "False"
      Else
        GraphicsWindow.FontBold = "True"
      EndIf
    EndIf
    If shp["func"] = "rect" Then
      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "ell" Then
      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "tri" Then
      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)
      shp["width"] = shp["x3"] - shp["x2"]
      shp["height"] = shp["y2"] - shp["y1"]
    ElseIf shp["func"] = "line" Then
      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)
      shp["width"] = Math.Max(shp["x1"], shp["x2"]) - Math.Min(shp["x1"], shp["x2"])
      shp["height"] = Math.Max(shp["y1"], shp["y2"]) - Math.Min(shp["y1"], shp["y2"])
    ElseIf shp["func"] = "text" Then
      shp["obj"] = Shapes.AddText(shp["text"])
      shp["width"] = shp["fs"] * 0.6 * Text.GetLength(shp["text"])
      shp["height"] = shp["fs"]
    EndIf
    param["x"] = shp["x"]
    param["y"] = shp["y"]
    param["cx"] = shWidth / 2
    param["cy"] = shHeight / 2
    param["width"] = shp["width"]
    param["height"] = shp["height"]
    param["scale"] = s
    param["angle"] = 0
    Shapes_CalcRotateZoomPos()
    shp["rx"] = x
    shp["ry"] = y
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(shp["angle"])
      SB_RotateWorkaround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    If shp["func"] = "btn" Then
      shp["obj"] = Controls.AddButton(shp["caption"], shX + x, shY + y)
    Else
      Shapes.Move(shp["obj"], shX + x, shY + y)
    EndIf
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then
      Shapes.Rotate(shp["obj"], shp["angle"])
    EndIf
    shape[i] = shp
  EndFor
  grp["shape"] = shape
  group[nGroup] = grp
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub

Sub Group_Move
  ' Group | Move a group
  ' param group[i] - group To move
  ' param x, y - position To move
  ' return group[i] - updated group
  Stack.PushValue("local", j)
  grp = group[i]
  s = grp["scale"]
  grp["x"] = x
  grp["y"] = y
  shape = grp["shape"]
  n = Array.GetItemCount(shape)
  For j = 1 To n
    shp = shape[j]
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      _x = shp["wx"]
      _y = shp["wy"]
    Else
      _x = shp["rx"]
      _y = shp["ry"]
    EndIf
    Shapes.Move(shp["obj"], grp["x"] + _x, grp["y"] + _y)
  EndFor
  group[i] = grp
  j = Stack.PopValue("local")
EndSub

Sub Group_Rotate
  ' Group | Rotate a group
  ' param group[i] - group To move
  ' param cx, cy - rotation center (If given)
  ' param angle - To rotate
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  Stack.PushValue("local", n)
  grp = group[i]
  shape = grp["shape"]
  moved = "False"
  If cx <> "" Then
    moved = "True"
  Else
    cx = ""   ' To avoid syntax error
  EndIf
  If cy <> "" Then
    moved = "True"
  Else
    cy = ""   ' To avoid syntax error
  EndIf
  If moved Then
    param["x"] = grp["x"]
    param["y"] = grp["y"]
    param["cx"] = cx
    param["cy"] = cy
    param["width"] = grp["width"]
    param["height"] = grp["height"]
    param["scale"] = 1
    param["angle"] = angle
    Shapes_CalcRotateZoomPos()
    grp["x"] = x
    grp["y"] = y
  EndIf
  param["cx"] = grp["width"] / 2
  param["cy"] = grp["height"] / 2
  param["scale"] = grp["scale"]
  grp["angle"] = grp["angle"] + angle
  param["angle"] = grp["angle"]
  n = Array.GetItemCount(shape)
  Stack.PushValue("local", i)
  For i = 1 To n
    shp = shape[i]
    param["x"] = shp["x"]
    param["y"] = shp["y"]
    param["width"] = shp["width"]
    param["height"] = shp["height"]
    Shapes_CalcRotateZoomPos()
    shp["rx"] = x
    shp["ry"] = y
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(shp["angle"] + grp["angle"])
      SB_RotateWorkAround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    Shapes.Move(shp["obj"], grp["x"] + x, grp["y"] + y)
    Shapes.Rotate(shp["obj"], shp["angle"] + grp["angle"])
    shape[i] = shp
  EndFor
  i = Stack.PopValue("local")
  grp["shape"] = shape
  group[i] = grp
  n = Stack.PopValue("local")
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
EndSub

Sub Math_CartesianToPolar
  ' Math | convert cartesian coodinate To polar coordinate
  ' param x, y - cartesian coordinate
  ' return r, a - polar coordinate
  r = Math.SquareRoot(x * x + y * y)
  If x = 0 And y > 0 Then
    a = 90 ' [degree]
  ElseIf x = 0 And y < 0 Then
    a = -90
  ElseIf x = 0 Then
    a = 0
  Else
    a = Math.ArcTan(y / x) * 180 / Math.Pi
  EndIf
  If x < 0 Then
    a = a + 180
  ElseIf x > 0 And y < 0 Then
    a = a + 360
  EndIf
EndSub

Sub SB_RotateWorkaround
  ' Small Basic | Rotate workaround For Silverlight
  ' param shp - current shape
  ' param x, y - original coordinate
  ' param alpha - angle [radian]
  ' returns x, y - workaround coordinate
  If shp["func"] = "tri" Then
    x1 = -Math.Floor(shp["x3"] / 2)
    y1 = -Math.Floor(shp["y3"] / 2)
  ElseIf shp["func"] = "line" Then
    x1 = -Math.Floor(Math.Abs(shp["x1"] - shp["x2"]) / 2)
    y1 = -Math.Floor(Math.Abs(shp["y1"] - shp["y2"]) / 2)
  EndIf
  ox = x - x1
  oy = y - y1
  x = x1 * Math.Cos(alpha) - y1 * Math.Sin(alpha) + ox
  y = x1 * Math.Sin(alpha) + y1 * Math.Cos(alpha) + oy
EndSub

Sub SB_Workaround
  ' Small Basic | Workaround for Silverlight
  ' returns silverlight - "True" if in remote
  color = GraphicsWindow.GetPixel(0, 0)
  If Text.GetLength(color) > 7 Then
    silverlight = "True"
    msWait = 300
  Else
    silverlight = "False"
  EndIf
EndSub

Sub Shapes_CalcRotateZoomPos
  ' Shapes | Calculate position For rotated and zoomed shape
  ' param["x"], param["y"] - position of a shape
  ' param["width"], param["height"] - size of a shape
  ' param ["cx"], param["cy"] - center of rotation
  ' param ["angle"] - rotate angle
  ' param ["scale"] - zoom scale
  ' return x, y - rotated position of a shape
  _cx = param["x"] + param["width"] / 2
  _cy = param["y"] + param["height"] / 2
  x = _cx - param["cx"]
  y = _cy - param["cy"]
  Math_CartesianToPolar()
  a = a + param["angle"]
  x = r * Math.Cos(a * Math.Pi / 180) * param["scale"]
  y = r * Math.Sin(a * Math.Pi / 180) * param["scale"]
  _cx = x + param["cx"]
  _cy = y + param["cy"]
  x = _cx - param["width"] / 2 * param["scale"]
  y = _cy - param["height"] / 2 * param["scale"]
EndSub

Sub Shapes_CalcWidthAndHeight
  ' Shapes | Calculate total width and height of shapes
  ' param shape[] - shape array
  ' return shWidth, shHeight - total size of shapes
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    If shp["func"] = "tri" Or shp["func"] = "line" Then
      xmin = shp["x1"]
      xmax = shp["x1"]
      ymin = shp["y1"]
      ymax = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If xmax < shp["x2"] Then
        xmax = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If ymax < shp["y2"] Then
        ymax = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If xmax < shp["x3"] Then
          xmax = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        If ymax < shp["y3"] Then
          ymax = shp["y3"]
        EndIf
      EndIf
      shp["width"] = xmax - xmin
      shp["height"] = ymax - ymin
    EndIf
    If i = 1 Then
      shWidth = shp["x"] + shp["width"]
      shHeight = shp["y"] + shp["height"]
    Else
      If shWidth < shp["x"] + shp["width"] Then
        shWidth = shp["x"] + shp["width"]
      EndIf
      If shHeight < shp["y"] + shp["height"] Then
        shHeight = shp["y"] + shp["height"]
      EndIf
    EndIf
    shape[i] = shp
  EndFor
EndSub

Sub Shapes_Init
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 145 ' x offset
  shY = 117 ' y offset
  shape = ""
  shape[1] = "func=tri;x=17;y=153;x1=27;y1=0;x2=0;y2=57;x3=55;y3=57;angle=180;bc=#CC0000;pw=0;"
  shape[2] = "func=tri;x=0;y=118;x1=27;y1=0;x2=0;y2=57;x3=55;y3=57;angle=180;bc=#000000;pw=0;"
  shape[3] = "func=tri;x=73;y=118;x1=27;y1=0;x2=0;y2=57;x3=55;y3=57;bc=#000000;pw=0;"
  shape[4] = "func=rect;x=26;y=118;width=74;height=33;bc=#000000;pw=0;"
  shape[5] = "func=rect;x=45;y=165;width=271;height=45;bc=#CC0000;pw=0;"
  shape[6] = "func=rect;x=29;y=124;width=287;height=51;bc=#000000;pw=0;"
  shape[7] = "func=ell;x=269;y=124;width=91;height=36;bc=#000000;pw=0;"
  shape[8] = "func=rect;x=313;y=124;width=47;height=20;bc=#000000;pw=0;"
  shape[9] = "func=tri;x=277;y=154;x1=35;y1=0;x2=0;y2=16;x3=70;y3=16;angle=180;bc=#000000;pw=0;"
  shape[10] = "func=line;x=12;y=140;x1=0;y1=1;x2=346;y2=0;pc=#FFFFFF;pw=4;"
  shape[11] = "func=rect;x=129;y=71;width=31;height=55;bc=#FFFFFF;pw=0;"
  shape[12] = "func=rect;x=158;y=84;width=113;height=42;bc=#FFFFFF;pw=0;"
  shape[13] = "func=rect;x=183;y=39;width=30;height=47;bc=#000000;pw=0;"
  shape[14] = "func=rect;x=183;y=49;width=30;height=21;bc=#FFFFFF;pw=0;"
  shape[15] = "func=line;x=183;y=56;x1=30;y1=0;x2=0;y2=0;pc=#FF0000;pw=4;"
  shape[16] = "func=line;x=183;y=63;x1=30;y1=0;x2=0;y2=0;pc=#FF0000;pw=4;"
  shape[17] = "func=rect;x=71;y=7;width=6;height=113;bc=#FFCC00;pw=0;"
  shape[18] = "func=rect;x=304;y=7;width=6;height=119;bc=#FFCC00;pw=0;"
  shape[19] = "func=rect;x=129;y=79;width=6;height=12;bc=#000000;pw=0;"
  shape[20] = "func=rect;x=129;y=94;width=6;height=12;bc=#000000;pw=0;"
  shape[21] = "func=rect;x=129;y=109;width=6;height=12;bc=#000000;pw=0;"
  shape[22] = "func=rect;x=144;y=81;width=8;height=16;bc=#000000;pw=0;"
  shape[23] = "func=rect;x=160;y=104;width=15;height=12;bc=#000000;pw=0;"
  shape[24] = "func=rect;x=185;y=104;width=15;height=12;bc=#000000;pw=0;"
  shape[25] = "func=rect;x=209;y=104;width=15;height=12;bc=#000000;pw=0;"
  shape[26] = "func=rect;x=234;y=104;width=15;height=12;bc=#000000;pw=0;"
EndSub
