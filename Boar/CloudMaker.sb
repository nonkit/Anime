' Cloud Maker - Shapes Generator
' Version 0.2
' Copyright © 2018 Nonki Takahashi.  The MIT License.
' Last update 2018-12-30

GraphicsWindow.Title = "Cloud Maker 0.2"
Init()
pw = 0
bc = "Red"
x = 210
y = 62
width = 81
height = 24
Shapes_AddRectangle()
x = 291
y = 62
width = 47
height = 20
Shapes_AddRectangle()
x = 338
width = 50
height = 12
Shapes_AddRectangle()
x = 210
y = 86
width = 57
height = 14
Shapes_AddRectangle()
cx = "1=228;2=239;3=254;4=263;5=346;6=355;7=365;8=208;9=217;10=221;"
cy = "1=86;2=87;3=86;4=81;5=65;6=72;7=67;8=95;9=96;10=90;"
cr = "1=8;2=8;3=8;4=8;5=8;6=8;7=8;8=6;9=6;10=6;"
cx = cx + "11=281;12=288;13=300;14=304;15=312;16=321;17=329;18=334;"
cy = cy + "11=77;12=73;13=76;14=83;15=79;16=76;17=76;18=68;"
cr = cr + "11=6;12=6;13=6;14=6;15=6;16=6;17=6;18=7;"
GraphicsWindow.FontSize = 6
For i = 1 To Array.GetItemCount(cx)
  x = cx[i]
  y = cy[i]
  width = 2 * cr[i] 
  height = 2 * cr[i] 
  Shapes_AddEllipse()
EndFor
x = 0
y = 0
pc = "Black"
pw = 1
k = 2
r2 = 2
dθ = 10
ox = 240
oy = 85
θini = 200
θmin = 0
θmax = 360 * 1.5
sign = -1
DrawCloud()
k = 1.5
r2 = 1.5
ox = 288
oy = 75
θini = 0
θmax = 360 * 1.5
sign = 1
DrawCloud()
ox = 310
oy = 82
θini = -90
θmax = 360 * 1.2
sign = -1
DrawCloud()
ox = 330
oy = 75
θini = 200
θmax = 360 * 1.5
DrawCloud()
ox = 218
oy = 95
θmax = 360 * 1.4
DrawCloud()
ox = 260
oy = 84
k = 2
r2 = 2
θini = 220
θmin = 360 * 1.1
θmax = 360 * 1.35
DrawCloud()
ox = 362
oy = 69
k = 2
r2 = 2
θini = 205
θmin = 360
θmax = 360 * 1.4
DrawCloud()
pw = 14
x = 203
y = 55
width = 192
height = 318
AddFrame()
Shapes_Normalize()
Shapes_DumpArray()

Sub AddFrame
  GraphicsWindow.BrushColor = "Transparent"
  GraphicsWindow.PenColor = "#660000"
  GraphicsWindow.PenWidth = pw
  frame = Shapes.AddRectangle(width, height)
  Shapes.Move(frame, x, y)
EndSub

Sub DrawCloud
  π = Math.Pi
  _θini = θini * π　/ 180
  _dθ = dθ * π　/ 180
  a = k * _dθ
  s = 0
  For θ = θmin To θmax Step dθ
    _θ = θ * π / 180
    ' Archimedes'spiral
    r = k * _θ
    x2 = ox + r * Math.Cos(_θ + _θini)
    y2 = oy + sign * r * Math.Sin(_θ + _θini)
    b = 2 * k * _θ　* Math.Sin(_dθ / 2)
    ds = Math.SquareRoot(a * a + b * b - 2 * a * b * Math.Cos((π + _dθ) / 2))
    s = s + ds
    _α = s / r2
    _Δ = Math.ArcSin(b / Math.Sin((π + _dθ) / 2) / ds)
    b2 = 2 * k * (_θ　+　_dθ) * Math.Sin(_dθ / 2)
    ds2 = Math.SquareRoot(a * a + b2 * b2 - 2 * a * b2 * Math.Cos((π + _dθ) / 2))
    _γ2 = Math.ArcSin(k * _dθ / Math.Sin((π + _dθ) / 2) / ds2)
    _ε = (π - (π - _dθ) / 2 - _Δ - _γ2) / 2
    _β = π / 2 - _ε - _Δ
    ' + cycloid
    x2 = x2　+ r2 * Math.Cos(_θ - _β + _θini) + r2 * Math.Cos(_θ - _β - _α + _θini)
    y2 = y2 + sign * r2 * Math.Sin(_θ - _β + _θini) - sign * r2 * Math.Sin(_θ - _β - _α + _θini)
    If θmin < θ Then
      Shapes_AddLine()
    EndIf
    x1 = x2
    y1 = y2
  EndFor
EndSub

Sub Init
  gw = 598
  gh = 428
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
  ox = gw / 2
  oy = gh / 2
  iMin = 1
  iMax = iMin - 1
  pc = ""
  pw = 0
  bc = ""
  x = 0
  y = 0
  width = 0
  height = 0
  x1 = 0
  y1 = 0
  x2 = 0
  y2 = 0
  x3 = 0
  y3 = 0
  angle = 0
  fs = 12
  fn = "Trebuchet MS"
  fb = "False"
  fi = "False"
  txt = ""
  ' initialization For naruto
  sqr2 = Math.SquareRoot(2)
EndSub

Sub Color_ColorToRGB
  ' Color | Convert color To RGB values
  ' param color - "#rrggbb" (hexadecimal values)
  ' return r, g, b - RGB values 0..255
  sR = Text.GetSubText(color, 2, 2)
  sG = Text.GetSubText(color, 4, 2)
  sB = Text.GetSubText(color, 6, 2)
  hex = sR
  Math_Hex2Dec()
  r = dec
  hex = sG
  Math_Hex2Dec()
  g = dec
  hex = sB
  Math_Hex2Dec()
  b = dec
EndSub

Sub Color_NameToColor
  ' Color | Convert color name To color
  ' param color - color name
  ' return color -"#rrggbb"
  If Text.StartsWith(color, "#") Then
    color = Text.ConvertToUpperCase(color)
  Else
    bc = GraphicsWindow.BrushColor
    GraphicsWindow.BrushColor = color
    color = GraphicsWindow.BrushColor
    GraphicsWindow.BrushColor = bc
  EndIf
EndSub

Sub Math_Hex2Dec
  ' Math | Convert hexadecimal To decimal
  ' param hex
  ' return dec
  dec = 0
  len = Text.GetLength(hex)
  For ptr = 1 To len
    dec = dec * 16 + Text.GetIndexOf("123456789ABCDEF", Text.GetSubText(hex, ptr, 1))
  EndFor
EndSub

Sub Shapes_AddEllipse
  ' param x, y - top left position
  ' param width
  ' param height
  Shapes_EntryClear()
  Shapes_PenToEntry()
  Shapes_BrushToEntry()
  func = "ell"
  Shapes_FuncToEntry()
  Shapes_MoveToEntry()
  Shapes_RotateToEntry()
  Shapes_EntryToArray()
EndSub

Sub Shapes_AddLine
  ' param x1, y1 - first point
  ' param x2, y2 - second point
  Shapes_EntryClear()
  Shapes_PenToEntry()
  func = "line"
  Shapes_FuncToEntry()
  Shapes_MoveToEntry()
  Shapes_RotateToEntry()
  Shapes_EntryToArray()
EndSub

Sub Shapes_AddRectangle
  ' param x, y - top left position
  ' param width
  ' param height
  Shapes_EntryClear()
  Shapes_PenToEntry()
  Shapes_BrushToEntry()
  func = "rect"
  Shapes_FuncToEntry()
  Shapes_MoveToEntry()
  Shapes_RotateToEntry()
  Shapes_EntryToArray()
EndSub

Sub Shapes_AddText
  ' param x, y - top left position
  ' param txt - text
  Shapes_EntryClear()
  Shapes_PenToEntry()
  Shapes_BrushToEntry()
  Shapes_FontToEntry()
  func = "text"
  Shapes_FuncToEntry()
  Shapes_MoveToEntry()
  Shapes_RotateToEntry()
  Shapes_EntryToArray()
EndSub

Sub Shapes_AddTriangle
  ' param x1, y1 - first point
  ' param x2, y2 - second point
  ' param x3, y3 - third point
  Shapes_EntryClear()
  Shapes_PenToEntry()
  Shapes_BrushToEntry()
  func = "tri"
  Shapes_FuncToEntry()
  Shapes_MoveToEntry()
  Shapes_RotateToEntry()
  Shapes_EntryToArray()
EndSub

Sub Shapes_BrushToEntry
  GraphicsWindow.BrushColor = bc
  shp["bc"] = bc
EndSub

Sub Shapes_DumpArray
  order = "1=func;2=x;3=y;4=width;5=height;6=x1;7=y1;8=x2;9=y2;"
  order = order + "10=x3;11=y3;12=txt;13=fn;14=fs;15=fb;16=fi;"
  order = order + "17=angle;18=pw;19=pc;20=bc;"
  nOrder = Array.GetItemCount(order)
  WQ = Text.GetCharacter(34)
  LF = Text.GetCharacter(10)
  GraphicsWindow.BrushColor = "Black"
  GraphicsWindow.FontName = "Consolas"
  GraphicsWindow.FontSize = 14
  tbox = Controls.AddMultiLineTextBox(gw / 2, 10)
  Controls.SetSize(tbox, gw / 2 - 10, gh - 20)
  buf = "  shX = " + shX + " ' x offset" + LF
  buf = buf + "  shY = " + shY + " ' y offset" + LF
  buf = buf + "  shape = " + WQ + WQ + LF
  For i = iMin To iMax
    buf = buf + "  shape[" + i + "] = " + WQ
    shp = shape[i]
    For j = 1 To nOrder
      If shp[order[j]] <> "" Then
        buf = buf + order[j] + "=" + shp[order[j]] + ";"
      EndIf
    EndFor
    buf = buf + WQ + LF
  EndFor
  Controls.SetTextBoxText(tbox, buf)
  Shapes.SetOpacity(tbox, 50)
EndSub

Sub Shapes_EntryClear
  shp = ""
EndSub

Sub Shapes_EntryToArray
  iMax = iMax + 1
  shape[iMax] = shp
EndSub

Sub Shapes_FontToEntry
  GraphicsWindow.FontSize = fs
  shp["fs"] = fs
  GraphicsWindow.FontName = fn
  shp["fn"] = fn
  GraphicsWindow.FontBold = fb
  shp["fb"] = fb
  GraphicsWindow.FontItalic = fi
  shp["fi"] = fi
EndSub

Sub Shapes_FuncToEntry
  shp["func"] = func
  If func = "ell" Then
    obj = Shapes.AddEllipse(width, height)
    shp["width"] = Math.Floor(width * 100) / 100
    shp["height"] = Math.Floor(height * 100) / 100
  ElseIf func = "rect" Then
    obj = Shapes.AddRectangle(width, height)
    shp["width"] = Math.Floor(width * 100) / 100
    shp["height"] = Math.Floor(height * 100) / 100
  ElseIf func = "tri" Then
    obj = Shapes.AddTriangle(x1, y1, x2, y2, x3, y3)
    shp["x1"] = Math.Floor(x1 * 100) / 100
    shp["y1"] = Math.Floor(y1 * 100) / 100
    shp["x2"] = Math.Floor(x2 * 100) / 100
    shp["y2"] = Math.Floor(y2 * 100) / 100
    shp["x3"] = Math.Floor(x3 * 100) / 100
    shp["y3"] = Math.Floor(y3 * 100) / 100
  ElseIf func = "line" Then
    obj = Shapes.AddLine(x1, y1, x2, y2)
    shp["x1"] = Math.Floor(x1 * 100) / 100
    shp["y1"] = Math.Floor(y1 * 100) / 100
    shp["x2"] = Math.Floor(x2 * 100) / 100
    shp["y2"] = Math.Floor(y2 * 100) / 100
  ElseIf func = "text" Then
    obj = Shapes.AddText(txt)
    shp["text"] = txt
  EndIf
EndSub

Sub Shapes_MoveToEntry
  Shapes.Move(obj, x, y)
  shp["x"] = Math.Floor(x * 100) / 100
  shp["y"] = Math.Floor(y * 100) / 100
EndSub

Sub Shapes_Normalize
  For i = 1 To iMax
    shp = shape[i]
    If Text.IsSubText("line|tri", shp["func"]) Then
      xmin = shp["x1"]
      ymin = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        shp["x3"] = shp["x3"] - xmin
        shp["y3"] = shp["y3"] - ymin
      EndIf
      shp["x"] = shp["x"] + xmin
      shp["y"] = shp["y"] + ymin
      shp["x1"] = shp["x1"] - xmin
      shp["y1"] = shp["y1"] - ymin
      shp["x2"] = shp["x2"] - xmin
      shp["y2"] = shp["y2"] - ymin
      shape[i] = shp
    EndIf
  EndFor
  If 0 < iMax Then
    shp = shape[1]
    xmin = shp["x"]
    ymin = shp["y"]
    xmax = shp["x"]
    ymax = shp["y"]
  EndIf
  For i = 2 To iMax
    shp = shape[i]
    If shp["x"] < xmin Then
      xmin = shp["x"]
    EndIf
    If shp["y"] < ymin Then
      ymin = shp["y"]
    EndIf
    If xmax < shp["x"] Then
      xmax = shp["x"]
    EndIf
    If ymax < shp["y"] Then
      ymax = shp["y"]
    EndIf
  EndFor
  shX = xmin
  shY = ymin
  For i = 1 To iMax
    shp = shape[i]
    shp["x"] = shp["x"] - xmin
    shp["y"] = shp["y"] - ymin
    If shp["angle"] = 0 Then
      shp["angle"] = ""
    EndIf
    shape[i] = shp
  EndFor
EndSub

Sub Shapes_PenToEntry
  GraphicsWindow.PenWidth = pw
  shp["pw"] = pw
  If 0 < pw Then 
    GraphicsWindow.PenColor = pc
    shp["pc"] = pc
  EndIf
EndSub

Sub Shapes_RotateToEntry
  If angle <> 0 Then
    Shapes.Rotate(obj, angle)
    shp["angle"] = Math.Floor(angle * 100) / 100
  EndIf
EndSub
